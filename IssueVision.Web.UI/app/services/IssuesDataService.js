//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
(function () {
    'use strict';

    var serviceId = 'issuesDataService';
    angular.module('app').service(serviceId, ['$http', issuesDataService]);

    function issuesDataService($http) {
        var urlBase = '/api/issues';            

        this.getData = function () {
            return $http.get(urlBase  + '/all');
        };

         this.updateIssues = function(issues) {
            return $http.put(urlBase, issues);
        };

         this.insertIssues = function(issues) {
            return $http.post(urlBase, issues);
        };

         this.deleteIssues = function(issueID) {
            return $http.Delete(urlBase, issueID);
        };

        this.getDataPageable = function (sortExpression, page, pageSize) { 
            return $http({
                 url: urlBase ,
                 method: 'GET',
                 params: {
                     sortExpression : sortExpression || '', 
                     page : page || '', 
                     pageSize : pageSize || ''
                 }
            });
        };

        this.getDataByIssueID = function (issueID) {
            return $http.get(urlBase + '/' + issueID);
        };

        this.getDataByDuplicateID = function (duplicateID) {
            return $http.get(urlBase + '/' + duplicateID);
        };

        this.getDataByDuplicateIDPageable = function (duplicateID, sortExpression, page, pageSize) { 
            return $http({
                 url: urlBase + '/' + duplicateID + '/all',
                 method: 'GET',
                 params: {
                     duplicateID : duplicateID || '', 
                     sortExpression : sortExpression || '', 
                     page : page || '', 
                     pageSize : pageSize || ''
                 }
            });
        };

        this.getDataByIssueTypeID = function (issueTypeID) {
            return $http.get('/api/issueTypes/' + issueTypeID + '/issues/all');
        };

        this.getDataByIssueTypeIDPageable = function (issueTypeID, sortExpression, page, pageSize) { 
            return $http({
                 url: '/api/issueTypes/' + issueTypeID + '/issues',
                 method: 'GET',
                 params: {
                     issueTypeID : issueTypeID || '', 
                     sortExpression : sortExpression || '', 
                     page : page || '', 
                     pageSize : pageSize || ''
                 }
            });
        };

        this.getDataByPlatformID = function (platformID) {
            return $http.get('/api/platforms/' + platformID + '/issues/all');
        };

        this.getDataByPlatformIDPageable = function (platformID, sortExpression, page, pageSize) { 
            return $http({
                 url: '/api/platforms/' + platformID + '/issues',
                 method: 'GET',
                 params: {
                     platformID : platformID || '', 
                     sortExpression : sortExpression || '', 
                     page : page || '', 
                     pageSize : pageSize || ''
                 }
            });
        };

        this.getDataByResolutionID = function (resolutionID) {
            return $http.get('/api/resolutions/' + resolutionID + '/issues/all');
        };

        this.getDataByResolutionIDPageable = function (resolutionID, sortExpression, page, pageSize) { 
            return $http({
                 url: '/api/resolutions/' + resolutionID + '/issues',
                 method: 'GET',
                 params: {
                     resolutionID : resolutionID || '', 
                     sortExpression : sortExpression || '', 
                     page : page || '', 
                     pageSize : pageSize || ''
                 }
            });
        };

        this.getDataByStatusID = function (statusID) {
            return $http.get('/api/statuses/' + statusID + '/issues/all');
        };

        this.getDataByStatusIDPageable = function (statusID, sortExpression, page, pageSize) { 
            return $http({
                 url: '/api/statuses/' + statusID + '/issues',
                 method: 'GET',
                 params: {
                     statusID : statusID || '', 
                     sortExpression : sortExpression || '', 
                     page : page || '', 
                     pageSize : pageSize || ''
                 }
            });
        };

        this.getDataBySubStatusID = function (subStatusID) {
            return $http.get('/api/subStatuses/' + subStatusID + '/issues/all');
        };

        this.getDataBySubStatusIDPageable = function (subStatusID, sortExpression, page, pageSize) { 
            return $http({
                 url: '/api/subStatuses/' + subStatusID + '/issues',
                 method: 'GET',
                 params: {
                     subStatusID : subStatusID || '', 
                     sortExpression : sortExpression || '', 
                     page : page || '', 
                     pageSize : pageSize || ''
                 }
            });
        };

        this.getDataByAssignedToID = function (assignedToID) {
            return $http.get('/api/users/' + assignedToID + '/issues/all');
        };

        this.getDataByAssignedToIDPageable = function (assignedToID, sortExpression, page, pageSize) { 
            return $http({
                 url: '/api/users/' + assignedToID + '/issues',
                 method: 'GET',
                 params: {
                     assignedToID : assignedToID || '', 
                     sortExpression : sortExpression || '', 
                     page : page || '', 
                     pageSize : pageSize || ''
                 }
            });
        };

        this.getDataByChangedByID = function (changedByID) {
            return $http.get('/api/users/' + changedByID + '/issues/all');
        };

        this.getDataByChangedByIDPageable = function (changedByID, sortExpression, page, pageSize) { 
            return $http({
                 url: '/api/users/' + changedByID + '/issues',
                 method: 'GET',
                 params: {
                     changedByID : changedByID || '', 
                     sortExpression : sortExpression || '', 
                     page : page || '', 
                     pageSize : pageSize || ''
                 }
            });
        };

        this.getDataByOpenedByID = function (openedByID) {
            return $http.get('/api/users/' + openedByID + '/issues/all');
        };

        this.getDataByOpenedByIDPageable = function (openedByID, sortExpression, page, pageSize) { 
            return $http({
                 url: '/api/users/' + openedByID + '/issues',
                 method: 'GET',
                 params: {
                     openedByID : openedByID || '', 
                     sortExpression : sortExpression || '', 
                     page : page || '', 
                     pageSize : pageSize || ''
                 }
            });
        };

        this.getDataByResolvedByID = function (resolvedByID) {
            return $http.get('/api/users/' + resolvedByID + '/issues/all');
        };

        this.getDataByResolvedByIDPageable = function (resolvedByID, sortExpression, page, pageSize) { 
            return $http({
                 url: '/api/users/' + resolvedByID + '/issues',
                 method: 'GET',
                 params: {
                     resolvedByID : resolvedByID || '', 
                     sortExpression : sortExpression || '', 
                     page : page || '', 
                     pageSize : pageSize || ''
                 }
            });
        };


    }
})();
