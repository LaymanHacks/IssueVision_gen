//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using IssueVision.Data.DbCommandProvider;
using IssueVision.Data.Repository;
using IssueVision.Domain.Entities;

namespace IssueVision.Web.UI.Controllers.Api
{
    public class PlatformsApiController : ApiController
    {
        private readonly IPlatformsRepository _dbRepository;

        public PlatformsApiController(IPlatformsRepository dbRepository)
        {
            _dbRepository = dbRepository;
        }
   
                [Route("api/platforms/all", Name = "PlatformsGetDataRoute")]
        [HttpGet]
        public IQueryable<Platforms> GetData() 
        {
            return _dbRepository.GetData().AsQueryable();
        }

        [Route("api/platforms", Name = "PlatformsUpdateRoute")]
        [HttpPut]
        public void Update(Platforms platforms)
        {
            _dbRepository.Update( (Int32)platforms.PlatformID,  (string)platforms.Browser,  (string)platforms.BrowserVersion,  (string)platforms.OS,  (string)platforms.OSVersion, platforms.Language, platforms.Processor);
          }

        [Route("api/platforms", Name = "PlatformsInsertRoute")]
        [HttpPost]
        public Int32 Insert(Platforms platforms)
        {
             return _dbRepository.Insert( (Int32)platforms.PlatformID,  (string)platforms.Browser,  (string)platforms.BrowserVersion,  (string)platforms.OS,  (string)platforms.OSVersion, platforms.Language, platforms.Processor);
          }

        [Route("api/platforms", Name = "PlatformsDeleteRoute")]
        [HttpDelete]
        public HttpResponseMessage Delete(Int32 platformID)
        {
            try
            {
                 _dbRepository.Delete(platformID);
                 return Request.CreateResponse(HttpStatusCode.OK);
            }
                 catch (Exception)
            {
                 return Request.CreateResponse(HttpStatusCode.BadRequest);
            }
        }

        [Route("api/platforms", Name = "PlatformsGetDataPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataPageable(String sortExpression, Int32 page, Int32 pageSize) 
        {
              if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataPageable(sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetRowCount();
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "PlatformsGetDataPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/platforms/{platformID}", Name = "PlatformsGetDataByPlatformIDRoute")]
        [HttpGet]
        public IQueryable<Platforms> GetDataByPlatformID(Int32 platformID) 
        {
            return _dbRepository.GetDataByPlatformID(platformID).AsQueryable();
        }


    }
}
