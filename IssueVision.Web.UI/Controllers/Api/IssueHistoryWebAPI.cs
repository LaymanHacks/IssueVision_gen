//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using IssueVision.Data.DbCommandProvider;
using IssueVision.Data.Repository;
using IssueVision.Domain.Entities;

namespace IssueVision.Web.UI.Controllers.Api
{
    public class IssueHistoryApiController : ApiController
    {
        private readonly IIssueHistoryRepository _dbRepository;

        public IssueHistoryApiController(IIssueHistoryRepository dbRepository)
        {
            _dbRepository = dbRepository;
        }
   
                [Route("api/issueHistories/all", Name = "IssueHistoriesGetDataRoute")]
        [HttpGet]
        public IQueryable<IssueHistory> GetData() 
        {
            return _dbRepository.GetData().AsQueryable();
        }

        [Route("api/issueHistories", Name = "IssueHistoriesUpdateRoute")]
        [HttpPut]
        public void Update(IssueHistory issueHistory)
        {
            _dbRepository.Update(issueHistory.IssueID,  (string)issueHistory.Title, issueHistory.StatusID, issueHistory.SubStatusID, issueHistory.AssignedToID, issueHistory.IssueTypeID, issueHistory.Severity, issueHistory.Priority,  (string)issueHistory.ChangedByID,  (DateTime)issueHistory.LastChange,  (DateTime)issueHistory.OpenedDate,  (string)issueHistory.OpenedByID, issueHistory.PlatformID, issueHistory.ResolutionDate, issueHistory.ResolutionID, issueHistory.ResolvedByID, issueHistory.Description, issueHistory.ReproSteps, issueHistory.DuplicateID,  (string)issueHistory.Action, issueHistory.Comment,  (DateTime)issueHistory.DateCreated,  (Int32)issueHistory.IssueHistoryID);
          }

        [Route("api/issueHistories", Name = "IssueHistoriesInsertRoute")]
        [HttpPost]
        public Int32 Insert(IssueHistory issueHistory)
        {
             return _dbRepository.Insert(issueHistory.IssueID,  (string)issueHistory.Title, issueHistory.StatusID, issueHistory.SubStatusID, issueHistory.AssignedToID, issueHistory.IssueTypeID, issueHistory.Severity, issueHistory.Priority,  (string)issueHistory.ChangedByID,  (DateTime)issueHistory.LastChange,  (DateTime)issueHistory.OpenedDate,  (string)issueHistory.OpenedByID, issueHistory.PlatformID, issueHistory.ResolutionDate, issueHistory.ResolutionID, issueHistory.ResolvedByID, issueHistory.Description, issueHistory.ReproSteps, issueHistory.DuplicateID,  (string)issueHistory.Action, issueHistory.Comment,  (DateTime)issueHistory.DateCreated);
          }

        [Route("api/issueHistories", Name = "IssueHistoriesDeleteRoute")]
        [HttpDelete]
        public HttpResponseMessage Delete(Int32 issueHistoryID)
        {
            try
            {
                 _dbRepository.Delete(issueHistoryID);
                 return Request.CreateResponse(HttpStatusCode.OK);
            }
                 catch (Exception)
            {
                 return Request.CreateResponse(HttpStatusCode.BadRequest);
            }
        }

        [Route("api/issueHistories", Name = "IssueHistoriesGetDataPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataPageable(String sortExpression, Int32 page, Int32 pageSize) 
        {
              if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataPageable(sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetRowCount();
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "IssueHistoriesGetDataPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/issueHistories/all", Name = "IssueHistoriesGetDataByIssueHistoryIDRoute")]
        [HttpGet]
        public IQueryable<IssueHistory> GetDataByIssueHistoryID(Int32 issueHistoryID) 
        {
            return _dbRepository.GetDataByIssueHistoryID(issueHistoryID).AsQueryable();
        }


    }
}
