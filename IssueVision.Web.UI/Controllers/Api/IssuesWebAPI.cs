//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using IssueVision.Data.DbCommandProvider;
using IssueVision.Data.Repository;
using IssueVision.Domain.Entities;

namespace IssueVision.Web.UI.Controllers.Api
{
    public class IssuesApiController : ApiController
    {
        private readonly IIssuesRepository _dbRepository;

        public IssuesApiController(IIssuesRepository dbRepository)
        {
            _dbRepository = dbRepository;
        }
   
                [Route("api/issues/all", Name = "IssuesGetDataRoute")]
        [HttpGet]
        public IQueryable<Issues> GetData() 
        {
            return _dbRepository.GetData().AsQueryable();
        }

        [Route("api/issues", Name = "IssuesUpdateRoute")]
        [HttpPut]
        public void Update(Issues issues)
        {
            _dbRepository.Update(issues.IssueID,  (string)issues.Title, issues.StatusID, issues.SubStatusID, issues.AssignedToID, issues.IssueTypeID, issues.Severity, issues.Priority,  (string)issues.ChangedByID,  (DateTime)issues.LastChange,  (DateTime)issues.OpenedDate,  (string)issues.OpenedByID, issues.PlatformID, issues.ResolutionDate, issues.ResolutionID, issues.ResolvedByID, issues.Description, issues.ReproSteps, issues.DuplicateID);
          }

        [Route("api/issues", Name = "IssuesInsertRoute")]
        [HttpPost]
        public Int64 Insert(Issues issues)
        {
             return _dbRepository.Insert(issues.IssueID,  (string)issues.Title, issues.StatusID, issues.SubStatusID, issues.AssignedToID, issues.IssueTypeID, issues.Severity, issues.Priority,  (string)issues.ChangedByID,  (DateTime)issues.LastChange,  (DateTime)issues.OpenedDate,  (string)issues.OpenedByID, issues.PlatformID, issues.ResolutionDate, issues.ResolutionID, issues.ResolvedByID, issues.Description, issues.ReproSteps, issues.DuplicateID);
          }

        [Route("api/issues", Name = "IssuesDeleteRoute")]
        [HttpDelete]
        public HttpResponseMessage Delete(Int64 issueID)
        {
            try
            {
                 _dbRepository.Delete(issueID);
                 return Request.CreateResponse(HttpStatusCode.OK);
            }
                 catch (Exception)
            {
                 return Request.CreateResponse(HttpStatusCode.BadRequest);
            }
        }

        [Route("api/issues", Name = "IssuesGetDataPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataPageable(String sortExpression, Int32 page, Int32 pageSize) 
        {
              if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataPageable(sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetRowCount();
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "IssuesGetDataPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/issues/{issueID}", Name = "IssuesGetDataByIssueIDRoute")]
        [HttpGet]
        public IQueryable<Issues> GetDataByIssueID(Int64 issueID) 
        {
            return _dbRepository.GetDataByIssueID(issueID).AsQueryable();
        }

        [Route("api/issues/{duplicateID}", Name = "IssuesGetDataByDuplicateIDRoute")]
        [HttpGet]
        public IQueryable<Issues> GetDataByDuplicateID(Int64 duplicateID) 
        {
            return _dbRepository.GetDataByDuplicateID(duplicateID).AsQueryable();
        }

        [Route("api/issues/{duplicateID}/all", Name = "IssuesGetDataByDuplicateIDPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataByDuplicateIDPageable(Int64 duplicateID, String sortExpression, Int32 page, Int32 pageSize) 
        {
              if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataByDuplicateIDPageable(duplicateID, sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetDataByDuplicateIDRowCount(duplicateID);
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "IssuesGetDataByDuplicateIDPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/issueTypes/{issueTypeID}/issues/all", Name = "IssuesGetDataByIssueTypeIDRoute")]
        [HttpGet]
        public IQueryable<Issues> GetDataByIssueTypeID(Byte issueTypeID) 
        {
            return _dbRepository.GetDataByIssueTypeID(issueTypeID).AsQueryable();
        }

        [Route("api/issueTypes/{issueTypeID}/issues", Name = "IssuesGetDataByIssueTypeIDPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataByIssueTypeIDPageable(Byte issueTypeID, String sortExpression, Int32 page, Int32 pageSize) 
        {
              if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataByIssueTypeIDPageable(issueTypeID, sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetDataByIssueTypeIDRowCount(issueTypeID);
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "IssuesGetDataByIssueTypeIDPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/platforms/{platformID}/issues/all", Name = "IssuesGetDataByPlatformIDRoute")]
        [HttpGet]
        public IQueryable<Issues> GetDataByPlatformID(Int32 platformID) 
        {
            return _dbRepository.GetDataByPlatformID(platformID).AsQueryable();
        }

        [Route("api/platforms/{platformID}/issues", Name = "IssuesGetDataByPlatformIDPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataByPlatformIDPageable(Int32 platformID, String sortExpression, Int32 page, Int32 pageSize) 
        {
              if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataByPlatformIDPageable(platformID, sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetDataByPlatformIDRowCount(platformID);
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "IssuesGetDataByPlatformIDPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/resolutions/{resolutionID}/issues/all", Name = "IssuesGetDataByResolutionIDRoute")]
        [HttpGet]
        public IQueryable<Issues> GetDataByResolutionID(Byte resolutionID) 
        {
            return _dbRepository.GetDataByResolutionID(resolutionID).AsQueryable();
        }

        [Route("api/resolutions/{resolutionID}/issues", Name = "IssuesGetDataByResolutionIDPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataByResolutionIDPageable(Byte resolutionID, String sortExpression, Int32 page, Int32 pageSize) 
        {
              if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataByResolutionIDPageable(resolutionID, sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetDataByResolutionIDRowCount(resolutionID);
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "IssuesGetDataByResolutionIDPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/statuses/{statusID}/issues/all", Name = "IssuesGetDataByStatusIDRoute")]
        [HttpGet]
        public IQueryable<Issues> GetDataByStatusID(Byte statusID) 
        {
            return _dbRepository.GetDataByStatusID(statusID).AsQueryable();
        }

        [Route("api/statuses/{statusID}/issues", Name = "IssuesGetDataByStatusIDPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataByStatusIDPageable(Byte statusID, String sortExpression, Int32 page, Int32 pageSize) 
        {
              if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataByStatusIDPageable(statusID, sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetDataByStatusIDRowCount(statusID);
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "IssuesGetDataByStatusIDPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/subStatuses/{subStatusID}/issues/all", Name = "IssuesGetDataBySubStatusIDRoute")]
        [HttpGet]
        public IQueryable<Issues> GetDataBySubStatusID(Byte subStatusID) 
        {
            return _dbRepository.GetDataBySubStatusID(subStatusID).AsQueryable();
        }

        [Route("api/subStatuses/{subStatusID}/issues", Name = "IssuesGetDataBySubStatusIDPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataBySubStatusIDPageable(Byte subStatusID, String sortExpression, Int32 page, Int32 pageSize) 
        {
              if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataBySubStatusIDPageable(subStatusID, sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetDataBySubStatusIDRowCount(subStatusID);
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "IssuesGetDataBySubStatusIDPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/users/{assignedToID}/issues/all", Name = "IssuesGetDataByAssignedToIDRoute")]
        [HttpGet]
        public IQueryable<Issues> GetDataByAssignedToID(String assignedToID) 
        {
            return _dbRepository.GetDataByAssignedToID(assignedToID).AsQueryable();
        }

        [Route("api/users/{assignedToID}/issues", Name = "IssuesGetDataByAssignedToIDPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataByAssignedToIDPageable(String assignedToID, String sortExpression, Int32 page, Int32 pageSize) 
        {
              if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataByAssignedToIDPageable(assignedToID, sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetDataByAssignedToIDRowCount(assignedToID);
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "IssuesGetDataByAssignedToIDPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/users/{changedByID}/issues/all", Name = "IssuesGetDataByChangedByIDRoute")]
        [HttpGet]
        public IQueryable<Issues> GetDataByChangedByID(String changedByID) 
        {
            return _dbRepository.GetDataByChangedByID(changedByID).AsQueryable();
        }

        [Route("api/users/{changedByID}/issues", Name = "IssuesGetDataByChangedByIDPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataByChangedByIDPageable(String changedByID, String sortExpression, Int32 page, Int32 pageSize) 
        {
              if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataByChangedByIDPageable(changedByID, sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetDataByChangedByIDRowCount(changedByID);
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "IssuesGetDataByChangedByIDPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/users/{openedByID}/issues/all", Name = "IssuesGetDataByOpenedByIDRoute")]
        [HttpGet]
        public IQueryable<Issues> GetDataByOpenedByID(String openedByID) 
        {
            return _dbRepository.GetDataByOpenedByID(openedByID).AsQueryable();
        }

        [Route("api/users/{openedByID}/issues", Name = "IssuesGetDataByOpenedByIDPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataByOpenedByIDPageable(String openedByID, String sortExpression, Int32 page, Int32 pageSize) 
        {
              if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataByOpenedByIDPageable(openedByID, sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetDataByOpenedByIDRowCount(openedByID);
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "IssuesGetDataByOpenedByIDPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/users/{resolvedByID}/issues/all", Name = "IssuesGetDataByResolvedByIDRoute")]
        [HttpGet]
        public IQueryable<Issues> GetDataByResolvedByID(String resolvedByID) 
        {
            return _dbRepository.GetDataByResolvedByID(resolvedByID).AsQueryable();
        }

        [Route("api/users/{resolvedByID}/issues", Name = "IssuesGetDataByResolvedByIDPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataByResolvedByIDPageable(String resolvedByID, String sortExpression, Int32 page, Int32 pageSize) 
        {
              if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataByResolvedByIDPageable(resolvedByID, sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetDataByResolvedByIDRowCount(resolvedByID);
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "IssuesGetDataByResolvedByIDPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }


    }
}
