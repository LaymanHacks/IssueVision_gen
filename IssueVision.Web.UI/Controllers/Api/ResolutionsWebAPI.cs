//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Generated by Merlin Version: 1.0.0.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using IssueVision.Data.DbCommandProvider;
using IssueVision.Data.Repository;
using IssueVision.Domain.Entities;

namespace IssueVision.Web.UI.Controllers.Api
{
    public class ResolutionsApiController : ApiController
    {
        private readonly IResolutionsRepository _dbRepository;

        public ResolutionsApiController(IResolutionsRepository dbRepository)
        {
            _dbRepository = dbRepository;
        }
   
                [Route("api/resolutions/all", Name = "ResolutionsGetDataRoute")]
        [HttpGet]
        public IQueryable<Resolutions> GetData() 
        {
            return _dbRepository.GetData().AsQueryable();
        }

        [Route("api/resolutions", Name = "ResolutionsUpdateRoute")]
        [HttpPut]
        public void Update(Resolutions resolutions)
        {
            _dbRepository.Update(resolutions.ResolutionID,  (string)resolutions.Name);
          }

        [Route("api/resolutions", Name = "ResolutionsInsertRoute")]
        [HttpPost]
        public Byte Insert(Resolutions resolutions)
        {
             return _dbRepository.Insert(resolutions.ResolutionID,  (string)resolutions.Name);
          }

        [Route("api/resolutions", Name = "ResolutionsDeleteRoute")]
        [HttpDelete]
        public HttpResponseMessage Delete(Byte resolutionID)
        {
            try
            {
                 _dbRepository.Delete(resolutionID);
                 return Request.CreateResponse(HttpStatusCode.OK);
            }
                 catch (Exception)
            {
                 return Request.CreateResponse(HttpStatusCode.BadRequest);
            }
        }

        [Route("api/resolutions", Name = "ResolutionsGetDataPageableRoute")]
        [HttpGet]
        public  HttpResponseMessage  GetDataPageable(String sortExpression, Int32 page, Int32 pageSize) 
        {
              if (page < 1) return Request.CreateResponse(HttpStatusCode.BadRequest);
            var results =_dbRepository.GetDataPageable(sortExpression, page, pageSize);
            var totalCount = _dbRepository.GetRowCount();
            var pagedResults = PagedResultHelper.CreatePagedResult(Request, "ResolutionsGetDataPageableRoute", page,
                pageSize, totalCount, results);
            return Request.CreateResponse(HttpStatusCode.OK, pagedResults);
        }

        [Route("api/resolutions/{resolutionID}", Name = "ResolutionsGetDataByResolutionIDRoute")]
        [HttpGet]
        public IQueryable<Resolutions> GetDataByResolutionID(Byte resolutionID) 
        {
            return _dbRepository.GetDataByResolutionID(resolutionID).AsQueryable();
        }


    }
}
