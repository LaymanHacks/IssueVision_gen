'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Collections.Generic
Imports IssueVision.Data
Imports IssueVision.Domain.Entities
Imports IssueVision.Data.DbCommandProvider
Imports System.Collections.ObjectModel

  
Namespace IssueVision.Data.Repository    
    
    <Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Public Class DbIssuesRepository
        Implements IIssuesRepository
        Implements IDisposable

        Private ReadOnly _dbIssuesCommandProvider As IDbIssuesCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(ByVal dbIssuesCommandProvider As IDbIssuesCommandProvider)
            _dbIssuesCommandProvider = dbIssuesCommandProvider
            _dbConnHolder =_dbIssuesCommandProvider.IssuesDbConnectionHolder
        End Sub

      
    ''' <summary>
    ''' Selects one or more records from the Issues table 
    ''' </summary>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)> _ 
    Public Function GetData()  as ICollection(Of Issues) Implements IIssuesRepository.GetData
        Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Issues)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Issues(CLng(reader("IssueID")), reader.GetString("Title"), CByte(reader("StatusID")), CType(reader("SubStatusID"), Byte?), reader.GetString("AssignedToID"), CByte(reader("IssueTypeID")), CByte(reader("Severity")), CByte(reader("Priority")), reader.GetString("ChangedByID"), reader.GetDateTime("LastChange"), reader.GetDateTime("OpenedDate"), reader.GetString("OpenedByID"), reader.GetNullableInt32("PlatformID"), reader.GetNullableDateTime("ResolutionDate"), CType(reader("ResolutionID"), Byte?), reader.GetString("ResolvedByID"), reader.GetString("Description"), reader.GetString("ReproSteps"), CType(reader("DuplicateID"), Long?))
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Updates one or more records from the Issues table 
    ''' </summary>
   ''' <param name="IssueID"></param>
   ''' <param name="Title"></param>
   ''' <param name="StatusID"></param>
   ''' <param name="SubStatusID"></param>
   ''' <param name="AssignedToID"></param>
   ''' <param name="IssueTypeID"></param>
   ''' <param name="Severity"></param>
   ''' <param name="Priority"></param>
   ''' <param name="ChangedByID"></param>
   ''' <param name="LastChange"></param>
   ''' <param name="OpenedDate"></param>
   ''' <param name="OpenedByID"></param>
   ''' <param name="PlatformID"></param>
   ''' <param name="ResolutionDate"></param>
   ''' <param name="ResolutionID"></param>
   ''' <param name="ResolvedByID"></param>
   ''' <param name="Description"></param>
   ''' <param name="ReproSteps"></param>
   ''' <param name="DuplicateID"></param>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)> _ 
    Public Sub Update( ByVal issueID As Int64,  ByVal title As String,  ByVal statusID As Byte,  ByVal subStatusID As  Nullable(Of Byte) ,  ByVal assignedToID As String,  ByVal issueTypeID As Byte,  ByVal severity As Byte,  ByVal priority As Byte,  ByVal changedByID As String,  ByVal lastChange As DateTime,  ByVal openedDate As DateTime,  ByVal openedByID As String,  ByVal platformID As  Nullable(Of Int32) ,  ByVal resolutionDate As  Nullable(Of DateTime) ,  ByVal resolutionID As  Nullable(Of Byte) ,  ByVal resolvedByID As String,  ByVal description As String,  ByVal reproSteps As String,  ByVal duplicateID As  Nullable(Of Int64) )  Implements IIssuesRepository.Update
        Dim command As IDbCommand = _dbIssuesCommandProvider.GetUpdateDbCommand(IssueID, Title, StatusID, SubStatusID, AssignedToID, IssueTypeID, Severity, Priority, ChangedByID, LastChange, OpenedDate, OpenedByID, PlatformID, ResolutionDate, ResolutionID, ResolvedByID, Description, ReproSteps, DuplicateID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
          Command.ExecuteNonQuery
            _dbConnHolder.Close()
    End Sub
  
    ''' <summary>
    ''' Updates one or more records from the Issues table 
    ''' </summary>
    ''' <param name="Issues"></param>
    ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, False)> _ 
    Public Sub Update(ByVal issues as Issues)  Implements IIssuesRepository.Update
             With Issues
Update(.IssueID,  CStr(.Title), .StatusID, .SubStatusID, .AssignedToID, .IssueTypeID, .Severity, .Priority,  CStr(.ChangedByID),  CDate(.LastChange),  CDate(.OpenedDate),  CStr(.OpenedByID), .PlatformID, .ResolutionDate, .ResolutionID, .ResolvedByID, .Description, .ReproSteps, .DuplicateID)
       End With

    End Sub
  
    ''' <summary>
    ''' Inserts an entity of Issues into the database.
    ''' </summary>
   ''' <param name="IssueID"></param>
   ''' <param name="Title"></param>
   ''' <param name="StatusID"></param>
   ''' <param name="SubStatusID"></param>
   ''' <param name="AssignedToID"></param>
   ''' <param name="IssueTypeID"></param>
   ''' <param name="Severity"></param>
   ''' <param name="Priority"></param>
   ''' <param name="ChangedByID"></param>
   ''' <param name="LastChange"></param>
   ''' <param name="OpenedDate"></param>
   ''' <param name="OpenedByID"></param>
   ''' <param name="PlatformID"></param>
   ''' <param name="ResolutionDate"></param>
   ''' <param name="ResolutionID"></param>
   ''' <param name="ResolvedByID"></param>
   ''' <param name="Description"></param>
   ''' <param name="ReproSteps"></param>
   ''' <param name="DuplicateID"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)> _ 
    Public Function Insert( ByVal issueID As Int64,  ByVal title As String,  ByVal statusID As Byte,  ByVal subStatusID As  Nullable(Of Byte) ,  ByVal assignedToID As String,  ByVal issueTypeID As Byte,  ByVal severity As Byte,  ByVal priority As Byte,  ByVal changedByID As String,  ByVal lastChange As DateTime,  ByVal openedDate As DateTime,  ByVal openedByID As String,  ByVal platformID As  Nullable(Of Int32) ,  ByVal resolutionDate As  Nullable(Of DateTime) ,  ByVal resolutionID As  Nullable(Of Byte) ,  ByVal resolvedByID As String,  ByVal description As String,  ByVal reproSteps As String,  ByVal duplicateID As  Nullable(Of Int64) )  as Int64 Implements IIssuesRepository.Insert
        Dim command As IDbCommand = _dbIssuesCommandProvider.GetInsertDbCommand(IssueID, Title, StatusID, SubStatusID, AssignedToID, IssueTypeID, Severity, Priority, ChangedByID, LastChange, OpenedDate, OpenedByID, PlatformID, ResolutionDate, ResolutionID, ResolvedByID, Description, ReproSteps, DuplicateID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int64  = Convert.ToInt64(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
  
    ''' <summary>
    ''' Inserts an entity of Issues into the database.
    ''' </summary>
    ''' <param name="Issues"></param>
    ''' <returns></returns>
    ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, False)> _ 
    Public Function Insert(ByVal issues as Issues)  as Int64 Implements IIssuesRepository.Insert
             With Issues
 Return Insert(.IssueID,  CStr(.Title), .StatusID, .SubStatusID, .AssignedToID, .IssueTypeID, .Severity, .Priority,  CStr(.ChangedByID),  CDate(.LastChange),  CDate(.OpenedDate),  CStr(.OpenedByID), .PlatformID, .ResolutionDate, .ResolutionID, .ResolvedByID, .Description, .ReproSteps, .DuplicateID)
       End With

    End Function
  
    ''' <summary>
    ''' Deletes one or more records from the Issues table 
    ''' </summary>
   ''' <param name="IssueID"></param>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)> _ 
    Public Sub Delete( ByVal issueID As Int64)  Implements IIssuesRepository.Delete
        Dim command As IDbCommand = _dbIssuesCommandProvider.GetDeleteDbCommand(IssueID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
          Command.ExecuteNonQuery
            _dbConnHolder.Close()
    End Sub
  
    ''' <summary>
    ''' Deletes one or more records from the Issues table 
    ''' </summary>
    ''' <param name="Issues"></param>
    ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, False)> _ 
    Public Sub Delete(ByVal issues as Issues)  Implements IIssuesRepository.Delete
             With Issues
Delete(.IssueID)
       End With

    End Sub
  
    ''' <summary>
    ''' Function GetDataPageable returns a IDataReader populated with a subset of data from Issues
    ''' </summary>
   ''' <param name="sortExpression"></param>
   ''' <param name="page"></param>
   ''' <param name="pageSize"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataPageable( ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32)  as ICollection(Of Issues) Implements IIssuesRepository.GetDataPageable
        Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataPageableDbCommand(sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Issues)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Issues(CLng(reader("IssueID")), reader.GetString("Title"), CByte(reader("StatusID")), CType(reader("SubStatusID"), Byte?), reader.GetString("AssignedToID"), CByte(reader("IssueTypeID")), CByte(reader("Severity")), CByte(reader("Priority")), reader.GetString("ChangedByID"), reader.GetDateTime("LastChange"), reader.GetDateTime("OpenedDate"), reader.GetString("OpenedByID"), reader.GetNullableInt32("PlatformID"), reader.GetNullableDateTime("ResolutionDate"), reader("ResolutionID"), reader.GetString("ResolvedByID"), reader.GetString("Description"), reader.GetString("ReproSteps"), reader("DuplicateID"))
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Function GetRowCount returns the row count for Issues
    ''' </summary>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetRowCount()  as Int32 Implements IIssuesRepository.GetRowCount
        Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
  
    ''' <summary>
    ''' Function GetDataByIssueID returns a IDataReader for Issues
    ''' </summary>
   ''' <param name="IssueID"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataByIssueID( ByVal issueID As Int64)  as ICollection(Of Issues) Implements IIssuesRepository.GetDataByIssueID
        Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByIssueIDDbCommand(IssueID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Issues)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Issues(reader("IssueID"), reader.GetString("Title"), CByte(reader("StatusID")), reader("SubStatusID"), reader.GetString("AssignedToID"), reader("IssueTypeID"), reader("Severity"), reader("Priority"), reader.GetString("ChangedByID"), reader.GetDateTime("LastChange"), reader.GetDateTime("OpenedDate"), reader.GetString("OpenedByID"), reader.GetNullableInt32("PlatformID"), reader.GetNullableDateTime("ResolutionDate"), reader("ResolutionID"), reader.GetString("ResolvedByID"), reader.GetString("Description"), reader.GetString("ReproSteps"), reader("DuplicateID"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetDataByDuplicateID returns a IDataReader for Issues
        ''' </summary>
        ''' <param name="DuplicateID"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByDuplicateID(ByVal duplicateID As Int64) As ICollection(Of Issues) Implements IIssuesRepository.GetDataByDuplicateID
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByDuplicateIDDbCommand(DuplicateID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Issues)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Issues(reader("IssueID"), reader.GetString("Title"), CByte(reader("StatusID")), reader("SubStatusID"), reader.GetString("AssignedToID"), reader("IssueTypeID"), reader("Severity"), reader("Priority"), reader.GetString("ChangedByID"), reader.GetDateTime("LastChange"), reader.GetDateTime("OpenedDate"), reader.GetString("OpenedByID"), reader.GetNullableInt32("PlatformID"), reader.GetNullableDateTime("ResolutionDate"), reader("ResolutionID"), reader.GetString("ResolvedByID"), reader.GetString("Description"), reader.GetString("ReproSteps"), reader("DuplicateID"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetDataByDuplicateIDPageable returns a IDataReader populated with a subset of data from Issues
        ''' </summary>
        ''' <param name="DuplicateID"></param>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="pageSize"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByDuplicateIDPageable(ByVal duplicateID As Int64, ByVal sortExpression As String, ByVal page As Int32, ByVal pageSize As Int32) As ICollection(Of Issues) Implements IIssuesRepository.GetDataByDuplicateIDPageable
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByDuplicateIDPageableDbCommand(DuplicateID, sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Issues)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Issues(reader("IssueID"), reader.GetString("Title"), CByte(reader("StatusID")), reader("SubStatusID"), reader.GetString("AssignedToID"), reader("IssueTypeID"), reader("Severity"), reader("Priority"), reader.GetString("ChangedByID"), reader.GetDateTime("LastChange"), reader.GetDateTime("OpenedDate"), reader.GetString("OpenedByID"), reader.GetNullableInt32("PlatformID"), reader.GetNullableDateTime("ResolutionDate"), reader("ResolutionID"), reader.GetString("ResolvedByID"), reader.GetString("Description"), reader.GetString("ReproSteps"), reader("DuplicateID"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetRowCount returns the row count for Issues
        ''' </summary>
        ''' <param name="DuplicateID"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByDuplicateIDRowCount(ByVal duplicateID As Int64) As Int32 Implements IIssuesRepository.GetDataByDuplicateIDRowCount
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByDuplicateIDRowCountDbCommand(DuplicateID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function

        ''' <summary>
        ''' Function GetDataByIssueTypeID returns a IDataReader for Issues
        ''' </summary>
        ''' <param name="IssueTypeID"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByIssueTypeID(ByVal issueTypeID As Byte) As ICollection(Of Issues) Implements IIssuesRepository.GetDataByIssueTypeID
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByIssueTypeIDDbCommand(IssueTypeID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Issues)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Issues(reader("IssueID"), reader.GetString("Title"), CByte(reader("StatusID")), reader("SubStatusID"), reader.GetString("AssignedToID"), reader("IssueTypeID"), reader("Severity"), reader("Priority"), reader.GetString("ChangedByID"), reader.GetDateTime("LastChange"), reader.GetDateTime("OpenedDate"), reader.GetString("OpenedByID"), reader.GetNullableInt32("PlatformID"), reader.GetNullableDateTime("ResolutionDate"), reader("ResolutionID"), reader.GetString("ResolvedByID"), reader.GetString("Description"), reader.GetString("ReproSteps"), reader("DuplicateID"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetDataByIssueTypeIDPageable returns a IDataReader populated with a subset of data from Issues
        ''' </summary>
        ''' <param name="IssueTypeID"></param>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="pageSize"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByIssueTypeIDPageable(ByVal issueTypeID As Byte, ByVal sortExpression As String, ByVal page As Int32, ByVal pageSize As Int32) As ICollection(Of Issues) Implements IIssuesRepository.GetDataByIssueTypeIDPageable
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByIssueTypeIDPageableDbCommand(IssueTypeID, sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Issues)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Issues(reader("IssueID"), reader.GetString("Title"), CByte(reader("StatusID")), reader("SubStatusID"), reader.GetString("AssignedToID"), reader("IssueTypeID"), reader("Severity"), reader("Priority"), reader.GetString("ChangedByID"), reader.GetDateTime("LastChange"), reader.GetDateTime("OpenedDate"), reader.GetString("OpenedByID"), reader.GetNullableInt32("PlatformID"), reader.GetNullableDateTime("ResolutionDate"), reader("ResolutionID"), reader.GetString("ResolvedByID"), reader.GetString("Description"), reader.GetString("ReproSteps"), reader("DuplicateID"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetRowCount returns the row count for Issues
        ''' </summary>
        ''' <param name="IssueTypeID"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByIssueTypeIDRowCount(ByVal issueTypeID As Byte) As Int32 Implements IIssuesRepository.GetDataByIssueTypeIDRowCount
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByIssueTypeIDRowCountDbCommand(IssueTypeID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function

        ''' <summary>
        ''' Function GetDataByPlatformID returns a IDataReader for Issues
        ''' </summary>
        ''' <param name="PlatformID"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByPlatformID(ByVal platformID As Int32) As ICollection(Of Issues) Implements IIssuesRepository.GetDataByPlatformID
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByPlatformIDDbCommand(PlatformID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Issues)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Issues(reader("IssueID"), reader.GetString("Title"), CByte(reader("StatusID")), reader("SubStatusID"), reader.GetString("AssignedToID"), reader("IssueTypeID"), reader("Severity"), reader("Priority"), reader.GetString("ChangedByID"), reader.GetDateTime("LastChange"), reader.GetDateTime("OpenedDate"), reader.GetString("OpenedByID"), reader.GetNullableInt32("PlatformID"), reader.GetNullableDateTime("ResolutionDate"), reader("ResolutionID"), reader.GetString("ResolvedByID"), reader.GetString("Description"), reader.GetString("ReproSteps"), reader("DuplicateID"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetDataByPlatformIDPageable returns a IDataReader populated with a subset of data from Issues
        ''' </summary>
        ''' <param name="PlatformID"></param>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="pageSize"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByPlatformIDPageable(ByVal platformID As Int32, ByVal sortExpression As String, ByVal page As Int32, ByVal pageSize As Int32) As ICollection(Of Issues) Implements IIssuesRepository.GetDataByPlatformIDPageable
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByPlatformIDPageableDbCommand(PlatformID, sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Issues)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Issues(reader("IssueID"), reader.GetString("Title"), CByte(reader("StatusID")), reader("SubStatusID"), reader.GetString("AssignedToID"), reader("IssueTypeID"), reader("Severity"), reader("Priority"), reader.GetString("ChangedByID"), reader.GetDateTime("LastChange"), reader.GetDateTime("OpenedDate"), reader.GetString("OpenedByID"), reader.GetNullableInt32("PlatformID"), reader.GetNullableDateTime("ResolutionDate"), reader("ResolutionID"), reader.GetString("ResolvedByID"), reader.GetString("Description"), reader.GetString("ReproSteps"), reader("DuplicateID"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetRowCount returns the row count for Issues
        ''' </summary>
        ''' <param name="PlatformID"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByPlatformIDRowCount(ByVal platformID As Int32) As Int32 Implements IIssuesRepository.GetDataByPlatformIDRowCount
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByPlatformIDRowCountDbCommand(PlatformID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function

        ''' <summary>
        ''' Function GetDataByResolutionID returns a IDataReader for Issues
        ''' </summary>
        ''' <param name="ResolutionID"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByResolutionID(ByVal resolutionID As Byte) As ICollection(Of Issues) Implements IIssuesRepository.GetDataByResolutionID
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByResolutionIDDbCommand(ResolutionID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Issues)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Issues(reader("IssueID"), reader.GetString("Title"), CByte(reader("StatusID")), reader("SubStatusID"), reader.GetString("AssignedToID"), reader("IssueTypeID"), reader("Severity"), reader("Priority"), reader.GetString("ChangedByID"), reader.GetDateTime("LastChange"), reader.GetDateTime("OpenedDate"), reader.GetString("OpenedByID"), reader.GetNullableInt32("PlatformID"), reader.GetNullableDateTime("ResolutionDate"), reader("ResolutionID"), reader.GetString("ResolvedByID"), reader.GetString("Description"), reader.GetString("ReproSteps"), reader("DuplicateID"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetDataByResolutionIDPageable returns a IDataReader populated with a subset of data from Issues
        ''' </summary>
        ''' <param name="ResolutionID"></param>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="pageSize"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByResolutionIDPageable(ByVal resolutionID As Byte, ByVal sortExpression As String, ByVal page As Int32, ByVal pageSize As Int32) As ICollection(Of Issues) Implements IIssuesRepository.GetDataByResolutionIDPageable
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByResolutionIDPageableDbCommand(ResolutionID, sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Issues)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Issues(reader("IssueID"), reader.GetString("Title"), CByte(reader("StatusID")), reader("SubStatusID"), reader.GetString("AssignedToID"), reader("IssueTypeID"), reader("Severity"), reader("Priority"), reader.GetString("ChangedByID"), reader.GetDateTime("LastChange"), reader.GetDateTime("OpenedDate"), reader.GetString("OpenedByID"), reader.GetNullableInt32("PlatformID"), reader.GetNullableDateTime("ResolutionDate"), reader("ResolutionID"), reader.GetString("ResolvedByID"), reader.GetString("Description"), reader.GetString("ReproSteps"), reader("DuplicateID"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetRowCount returns the row count for Issues
        ''' </summary>
        ''' <param name="ResolutionID"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByResolutionIDRowCount(ByVal resolutionID As Byte) As Int32 Implements IIssuesRepository.GetDataByResolutionIDRowCount
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByResolutionIDRowCountDbCommand(ResolutionID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function

        ''' <summary>
        ''' Function GetDataByStatusID returns a IDataReader for Issues
        ''' </summary>
        ''' <param name="StatusID"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByStatusID(ByVal statusID As Byte) As ICollection(Of Issues) Implements IIssuesRepository.GetDataByStatusID
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByStatusIDDbCommand(StatusID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Issues)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Issues(reader("IssueID"), reader.GetString("Title"), CByte(reader("StatusID")), reader("SubStatusID"), reader.GetString("AssignedToID"), reader("IssueTypeID"), reader("Severity"), reader("Priority"), reader.GetString("ChangedByID"), reader.GetDateTime("LastChange"), reader.GetDateTime("OpenedDate"), reader.GetString("OpenedByID"), reader.GetNullableInt32("PlatformID"), reader.GetNullableDateTime("ResolutionDate"), reader("ResolutionID"), reader.GetString("ResolvedByID"), reader.GetString("Description"), reader.GetString("ReproSteps"), reader("DuplicateID"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetDataByStatusIDPageable returns a IDataReader populated with a subset of data from Issues
        ''' </summary>
        ''' <param name="StatusID"></param>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="pageSize"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByStatusIDPageable(ByVal statusID As Byte, ByVal sortExpression As String, ByVal page As Int32, ByVal pageSize As Int32) As ICollection(Of Issues) Implements IIssuesRepository.GetDataByStatusIDPageable
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByStatusIDPageableDbCommand(StatusID, sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Issues)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Issues(reader("IssueID"), reader.GetString("Title"), CByte(reader("StatusID")), reader("SubStatusID"), reader.GetString("AssignedToID"), reader("IssueTypeID"), reader("Severity"), reader("Priority"), reader.GetString("ChangedByID"), reader.GetDateTime("LastChange"), reader.GetDateTime("OpenedDate"), reader.GetString("OpenedByID"), reader.GetNullableInt32("PlatformID"), reader.GetNullableDateTime("ResolutionDate"), reader("ResolutionID"), reader.GetString("ResolvedByID"), reader.GetString("Description"), reader.GetString("ReproSteps"), reader("DuplicateID"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetRowCount returns the row count for Issues
        ''' </summary>
        ''' <param name="StatusID"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByStatusIDRowCount(ByVal statusID As Byte) As Int32 Implements IIssuesRepository.GetDataByStatusIDRowCount
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByStatusIDRowCountDbCommand(StatusID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function

        ''' <summary>
        ''' Function GetDataBySubStatusID returns a IDataReader for Issues
        ''' </summary>
        ''' <param name="SubStatusID"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataBySubStatusID(ByVal subStatusID As Byte) As ICollection(Of Issues) Implements IIssuesRepository.GetDataBySubStatusID
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataBySubStatusIDDbCommand(SubStatusID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Issues)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Issues(reader("IssueID"), reader.GetString("Title"), CByte(reader("StatusID")), reader("SubStatusID"), reader.GetString("AssignedToID"), reader("IssueTypeID"), reader("Severity"), reader("Priority"), reader.GetString("ChangedByID"), reader.GetDateTime("LastChange"), reader.GetDateTime("OpenedDate"), reader.GetString("OpenedByID"), reader.GetNullableInt32("PlatformID"), reader.GetNullableDateTime("ResolutionDate"), reader("ResolutionID"), reader.GetString("ResolvedByID"), reader.GetString("Description"), reader.GetString("ReproSteps"), reader("DuplicateID"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetDataBySubStatusIDPageable returns a IDataReader populated with a subset of data from Issues
        ''' </summary>
        ''' <param name="SubStatusID"></param>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="pageSize"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataBySubStatusIDPageable(ByVal subStatusID As Byte, ByVal sortExpression As String, ByVal page As Int32, ByVal pageSize As Int32) As ICollection(Of Issues) Implements IIssuesRepository.GetDataBySubStatusIDPageable
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataBySubStatusIDPageableDbCommand(SubStatusID, sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Issues)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Issues(reader("IssueID"), reader.GetString("Title"), CByte(reader("StatusID")), reader("SubStatusID"), reader.GetString("AssignedToID"), reader("IssueTypeID"), reader("Severity"), reader("Priority"), reader.GetString("ChangedByID"), reader.GetDateTime("LastChange"), reader.GetDateTime("OpenedDate"), reader.GetString("OpenedByID"), reader.GetNullableInt32("PlatformID"), reader.GetNullableDateTime("ResolutionDate"), reader("ResolutionID"), reader.GetString("ResolvedByID"), reader.GetString("Description"), reader.GetString("ReproSteps"), reader("DuplicateID"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetRowCount returns the row count for Issues
        ''' </summary>
        ''' <param name="SubStatusID"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataBySubStatusIDRowCount(ByVal subStatusID As Byte) As Int32 Implements IIssuesRepository.GetDataBySubStatusIDRowCount
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataBySubStatusIDRowCountDbCommand(SubStatusID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function

        ''' <summary>
        ''' Function GetDataByAssignedToID returns a IDataReader for Issues
        ''' </summary>
        ''' <param name="AssignedToID"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByAssignedToID(ByVal assignedToID As String) As ICollection(Of Issues) Implements IIssuesRepository.GetDataByAssignedToID
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByAssignedToIDDbCommand(AssignedToID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Issues)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Issues(reader("IssueID"), reader.GetString("Title"), CByte(reader("StatusID")), reader("SubStatusID"), reader.GetString("AssignedToID"), reader("IssueTypeID"), reader("Severity"), reader("Priority"), reader.GetString("ChangedByID"), reader.GetDateTime("LastChange"), reader.GetDateTime("OpenedDate"), reader.GetString("OpenedByID"), reader.GetNullableInt32("PlatformID"), reader.GetNullableDateTime("ResolutionDate"), reader("ResolutionID"), reader.GetString("ResolvedByID"), reader.GetString("Description"), reader.GetString("ReproSteps"), reader("DuplicateID"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetDataByAssignedToIDPageable returns a IDataReader populated with a subset of data from Issues
        ''' </summary>
        ''' <param name="AssignedToID"></param>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="pageSize"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByAssignedToIDPageable(ByVal assignedToID As String, ByVal sortExpression As String, ByVal page As Int32, ByVal pageSize As Int32) As ICollection(Of Issues) Implements IIssuesRepository.GetDataByAssignedToIDPageable
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByAssignedToIDPageableDbCommand(AssignedToID, sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Issues)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Issues(reader("IssueID"), reader.GetString("Title"), CByte(reader("StatusID")), reader("SubStatusID"), reader.GetString("AssignedToID"), reader("IssueTypeID"), reader("Severity"), reader("Priority"), reader.GetString("ChangedByID"), reader.GetDateTime("LastChange"), reader.GetDateTime("OpenedDate"), reader.GetString("OpenedByID"), reader.GetNullableInt32("PlatformID"), reader.GetNullableDateTime("ResolutionDate"), reader("ResolutionID"), reader.GetString("ResolvedByID"), reader.GetString("Description"), reader.GetString("ReproSteps"), reader("DuplicateID"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetRowCount returns the row count for Issues
        ''' </summary>
        ''' <param name="AssignedToID"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByAssignedToIDRowCount(ByVal assignedToID As String) As Int32 Implements IIssuesRepository.GetDataByAssignedToIDRowCount
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByAssignedToIDRowCountDbCommand(AssignedToID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function

        ''' <summary>
        ''' Function GetDataByChangedByID returns a IDataReader for Issues
        ''' </summary>
        ''' <param name="ChangedByID"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByChangedByID(ByVal changedByID As String) As ICollection(Of Issues) Implements IIssuesRepository.GetDataByChangedByID
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByChangedByIDDbCommand(ChangedByID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Issues)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Issues(reader("IssueID"), reader.GetString("Title"), CByte(reader("StatusID")), reader("SubStatusID"), reader.GetString("AssignedToID"), reader("IssueTypeID"), reader("Severity"), reader("Priority"), reader.GetString("ChangedByID"), reader.GetDateTime("LastChange"), reader.GetDateTime("OpenedDate"), reader.GetString("OpenedByID"), reader.GetNullableInt32("PlatformID"), reader.GetNullableDateTime("ResolutionDate"), reader("ResolutionID"), reader.GetString("ResolvedByID"), reader.GetString("Description"), reader.GetString("ReproSteps"), reader("DuplicateID"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetDataByChangedByIDPageable returns a IDataReader populated with a subset of data from Issues
        ''' </summary>
        ''' <param name="ChangedByID"></param>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="pageSize"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByChangedByIDPageable(ByVal changedByID As String, ByVal sortExpression As String, ByVal page As Int32, ByVal pageSize As Int32) As ICollection(Of Issues) Implements IIssuesRepository.GetDataByChangedByIDPageable
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByChangedByIDPageableDbCommand(ChangedByID, sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Issues)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Issues(reader("IssueID"), reader.GetString("Title"), CByte(reader("StatusID")), reader("SubStatusID"), reader.GetString("AssignedToID"), reader("IssueTypeID"), reader("Severity"), reader("Priority"), reader.GetString("ChangedByID"), reader.GetDateTime("LastChange"), reader.GetDateTime("OpenedDate"), reader.GetString("OpenedByID"), reader.GetNullableInt32("PlatformID"), reader.GetNullableDateTime("ResolutionDate"), reader("ResolutionID"), reader.GetString("ResolvedByID"), reader.GetString("Description"), reader.GetString("ReproSteps"), reader("DuplicateID"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetRowCount returns the row count for Issues
        ''' </summary>
        ''' <param name="ChangedByID"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByChangedByIDRowCount(ByVal changedByID As String) As Int32 Implements IIssuesRepository.GetDataByChangedByIDRowCount
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByChangedByIDRowCountDbCommand(ChangedByID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function

        ''' <summary>
        ''' Function GetDataByOpenedByID returns a IDataReader for Issues
        ''' </summary>
        ''' <param name="OpenedByID"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByOpenedByID(ByVal openedByID As String) As ICollection(Of Issues) Implements IIssuesRepository.GetDataByOpenedByID
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByOpenedByIDDbCommand(OpenedByID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Issues)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Issues(reader("IssueID"), reader.GetString("Title"), CByte(reader("StatusID")), reader("SubStatusID"), reader.GetString("AssignedToID"), reader("IssueTypeID"), reader("Severity"), reader("Priority"), reader.GetString("ChangedByID"), reader.GetDateTime("LastChange"), reader.GetDateTime("OpenedDate"), reader.GetString("OpenedByID"), reader.GetNullableInt32("PlatformID"), reader.GetNullableDateTime("ResolutionDate"), reader("ResolutionID"), reader.GetString("ResolvedByID"), reader.GetString("Description"), reader.GetString("ReproSteps"), reader("DuplicateID"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetDataByOpenedByIDPageable returns a IDataReader populated with a subset of data from Issues
        ''' </summary>
        ''' <param name="OpenedByID"></param>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="pageSize"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByOpenedByIDPageable(ByVal openedByID As String, ByVal sortExpression As String, ByVal page As Int32, ByVal pageSize As Int32) As ICollection(Of Issues) Implements IIssuesRepository.GetDataByOpenedByIDPageable
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByOpenedByIDPageableDbCommand(OpenedByID, sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Issues)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Issues(reader("IssueID"), reader.GetString("Title"), CByte(reader("StatusID")), reader("SubStatusID"), reader.GetString("AssignedToID"), reader("IssueTypeID"), reader("Severity"), reader("Priority"), reader.GetString("ChangedByID"), reader.GetDateTime("LastChange"), reader.GetDateTime("OpenedDate"), reader.GetString("OpenedByID"), reader.GetNullableInt32("PlatformID"), reader.GetNullableDateTime("ResolutionDate"), reader("ResolutionID"), reader.GetString("ResolvedByID"), reader.GetString("Description"), reader.GetString("ReproSteps"), reader("DuplicateID"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetRowCount returns the row count for Issues
        ''' </summary>
        ''' <param name="OpenedByID"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByOpenedByIDRowCount(ByVal openedByID As String) As Int32 Implements IIssuesRepository.GetDataByOpenedByIDRowCount
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByOpenedByIDRowCountDbCommand(OpenedByID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Int32 = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue

        End Function

        ''' <summary>
        ''' Function GetDataByResolvedByID returns a IDataReader for Issues
        ''' </summary>
        ''' <param name="ResolvedByID"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByResolvedByID(ByVal resolvedByID As String) As ICollection(Of Issues) Implements IIssuesRepository.GetDataByResolvedByID
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByResolvedByIDDbCommand(ResolvedByID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Issues)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Issues(reader("IssueID"), reader.GetString("Title"), CByte(reader("StatusID")), reader("SubStatusID"), reader.GetString("AssignedToID"), reader("IssueTypeID"), reader("Severity"), reader("Priority"), reader.GetString("ChangedByID"), reader.GetDateTime("LastChange"), reader.GetDateTime("OpenedDate"), reader.GetString("OpenedByID"), reader.GetNullableInt32("PlatformID"), reader.GetNullableDateTime("ResolutionDate"), reader("ResolutionID"), reader.GetString("ResolvedByID"), reader.GetString("Description"), reader.GetString("ReproSteps"), reader("DuplicateID"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetDataByResolvedByIDPageable returns a IDataReader populated with a subset of data from Issues
        ''' </summary>
        ''' <param name="ResolvedByID"></param>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="pageSize"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByResolvedByIDPageable(ByVal resolvedByID As String, ByVal sortExpression As String, ByVal page As Int32, ByVal pageSize As Int32) As ICollection(Of Issues) Implements IIssuesRepository.GetDataByResolvedByIDPageable
            Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByResolvedByIDPageableDbCommand(ResolvedByID, sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Issues)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Issues(reader("IssueID"), reader.GetString("Title"), CByte(reader("StatusID")), reader("SubStatusID"), reader.GetString("AssignedToID"), reader("IssueTypeID"), reader("Severity"), reader("Priority"), reader.GetString("ChangedByID"), reader.GetDateTime("LastChange"), reader.GetDateTime("OpenedDate"), reader.GetString("OpenedByID"), reader.GetNullableInt32("PlatformID"), reader.GetNullableDateTime("ResolutionDate"), reader("ResolutionID"), reader.GetString("ResolvedByID"), reader.GetString("Description"), reader.GetString("ReproSteps"), reader("DuplicateID"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function
  
    ''' <summary>
    ''' Function GetRowCount returns the row count for Issues
    ''' </summary>
   ''' <param name="ResolvedByID"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataByResolvedByIDRowCount( ByVal resolvedByID As String)  as Int32 Implements IIssuesRepository.GetDataByResolvedByIDRowCount
        Dim command As IDbCommand = _dbIssuesCommandProvider.GetGetDataByResolvedByIDRowCountDbCommand(ResolvedByID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
   
  
#Region "IDisposable Support"
        Private disposedValue As Boolean
        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
#End Region
 
  End Class 
End NameSpace
