'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Collections.Generic
Imports IssueVision.Data
Imports IssueVision.Domain.Entities
Imports IssueVision.Data.DbCommandProvider
Imports System.Collections.ObjectModel

  
Namespace IssueVision.Data.Repository    
    
    <Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Public Class DbUsersRepository
        Implements IUsersRepository
        Implements IDisposable

        Private ReadOnly _dbUsersCommandProvider As IDbUsersCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(ByVal dbUsersCommandProvider As IDbUsersCommandProvider)
            _dbUsersCommandProvider = dbUsersCommandProvider
            _dbConnHolder =_dbUsersCommandProvider.UsersDbConnectionHolder
        End Sub

      
    ''' <summary>
    ''' Selects one or more records from the Users table 
    ''' </summary>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)> _ 
    Public Function GetData()  as ICollection(Of Users) Implements IUsersRepository.GetData
        Dim command As IDbCommand = _dbUsersCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Users)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Users( reader.GetString("Name") ,  reader.GetString("FirstName") ,  reader.GetString("LastName") ,  reader.GetString("Email") ,  reader.GetString("PasswordHash") ,  reader.GetString("PasswordSalt") ,  reader.GetString("PasswordQuestion") ,  reader.GetString("PasswordAnswerHash") ,  reader.GetString("PasswordAnswerSalt") ,  reader.GetString("UserType") , reader("ProfileReset"))
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Updates one or more records from the Users table 
    ''' </summary>
   ''' <param name="Name"></param>
   ''' <param name="FirstName"></param>
   ''' <param name="LastName"></param>
   ''' <param name="Email"></param>
   ''' <param name="PasswordHash"></param>
   ''' <param name="PasswordSalt"></param>
   ''' <param name="PasswordQuestion"></param>
   ''' <param name="PasswordAnswerHash"></param>
   ''' <param name="PasswordAnswerSalt"></param>
   ''' <param name="UserType"></param>
   ''' <param name="ProfileReset"></param>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)> _ 
    Public Sub Update( ByVal name As String,  ByVal firstName As String,  ByVal lastName As String,  ByVal email As String,  ByVal passwordHash As String,  ByVal passwordSalt As String,  ByVal passwordQuestion As String,  ByVal passwordAnswerHash As String,  ByVal passwordAnswerSalt As String,  ByVal userType As String,  ByVal profileReset As Byte)  Implements IUsersRepository.Update
        Dim command As IDbCommand = _dbUsersCommandProvider.GetUpdateDbCommand(Name, FirstName, LastName, Email, PasswordHash, PasswordSalt, PasswordQuestion, PasswordAnswerHash, PasswordAnswerSalt, UserType, ProfileReset)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
          Command.ExecuteNonQuery
            _dbConnHolder.Close()
    End Sub
  
    ''' <summary>
    ''' Updates one or more records from the Users table 
    ''' </summary>
    ''' <param name="Users"></param>
    ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, False)> _ 
    Public Sub Update(ByVal users as Users)  Implements IUsersRepository.Update
             With Users
Update( CStr(.Name),  CStr(.FirstName),  CStr(.LastName), .Email,  CStr(.PasswordHash),  CStr(.PasswordSalt),  CStr(.PasswordQuestion),  CStr(.PasswordAnswerHash),  CStr(.PasswordAnswerSalt),  CStr(.UserType), .ProfileReset)
       End With

    End Sub
  
    ''' <summary>
    ''' Inserts an entity of Users into the database.
    ''' </summary>
   ''' <param name="Name"></param>
   ''' <param name="FirstName"></param>
   ''' <param name="LastName"></param>
   ''' <param name="Email"></param>
   ''' <param name="PasswordHash"></param>
   ''' <param name="PasswordSalt"></param>
   ''' <param name="PasswordQuestion"></param>
   ''' <param name="PasswordAnswerHash"></param>
   ''' <param name="PasswordAnswerSalt"></param>
   ''' <param name="UserType"></param>
   ''' <param name="ProfileReset"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)> _ 
    Public Function Insert( ByVal name As String,  ByVal firstName As String,  ByVal lastName As String,  ByVal email As String,  ByVal passwordHash As String,  ByVal passwordSalt As String,  ByVal passwordQuestion As String,  ByVal passwordAnswerHash As String,  ByVal passwordAnswerSalt As String,  ByVal userType As String,  ByVal profileReset As Byte)  as String Implements IUsersRepository.Insert
        Dim command As IDbCommand = _dbUsersCommandProvider.GetInsertDbCommand(Name, FirstName, LastName, Email, PasswordHash, PasswordSalt, PasswordQuestion, PasswordAnswerHash, PasswordAnswerSalt, UserType, ProfileReset)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As String  = Convert.ToString(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
  
    ''' <summary>
    ''' Inserts an entity of Users into the database.
    ''' </summary>
    ''' <param name="Users"></param>
    ''' <returns></returns>
    ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, False)> _ 
    Public Function Insert(ByVal users as Users)  as String Implements IUsersRepository.Insert
             With Users
 Return Insert( CStr(.Name),  CStr(.FirstName),  CStr(.LastName), .Email,  CStr(.PasswordHash),  CStr(.PasswordSalt),  CStr(.PasswordQuestion),  CStr(.PasswordAnswerHash),  CStr(.PasswordAnswerSalt),  CStr(.UserType), .ProfileReset)
       End With

    End Function
  
    ''' <summary>
    ''' Deletes one or more records from the Users table 
    ''' </summary>
   ''' <param name="Name"></param>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)> _ 
    Public Sub Delete( ByVal name As String)  Implements IUsersRepository.Delete
        Dim command As IDbCommand = _dbUsersCommandProvider.GetDeleteDbCommand(Name)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
          Command.ExecuteNonQuery
            _dbConnHolder.Close()
    End Sub
  
    ''' <summary>
    ''' Deletes one or more records from the Users table 
    ''' </summary>
    ''' <param name="Users"></param>
    ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, False)> _ 
    Public Sub Delete(ByVal users as Users)  Implements IUsersRepository.Delete
             With Users
Delete( CStr(.Name))
       End With

    End Sub
  
    ''' <summary>
    ''' Function GetDataPageable returns a IDataReader populated with a subset of data from Users
    ''' </summary>
   ''' <param name="sortExpression"></param>
   ''' <param name="page"></param>
   ''' <param name="pageSize"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataPageable( ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32)  as ICollection(Of Users) Implements IUsersRepository.GetDataPageable
        Dim command As IDbCommand = _dbUsersCommandProvider.GetGetDataPageableDbCommand(sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Users)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Users( reader.GetString("Name") ,  reader.GetString("FirstName") ,  reader.GetString("LastName") ,  reader.GetString("Email") ,  reader.GetString("PasswordHash") ,  reader.GetString("PasswordSalt") ,  reader.GetString("PasswordQuestion") ,  reader.GetString("PasswordAnswerHash") ,  reader.GetString("PasswordAnswerSalt") ,  reader.GetString("UserType") , reader("ProfileReset"))
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Function GetRowCount returns the row count for Users
    ''' </summary>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetRowCount()  as Int32 Implements IUsersRepository.GetRowCount
        Dim command As IDbCommand = _dbUsersCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
  
    ''' <summary>
    ''' Function GetDataByName returns a IDataReader for Users
    ''' </summary>
   ''' <param name="Name"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataByName( ByVal name As String)  as ICollection(Of Users) Implements IUsersRepository.GetDataByName
        Dim command As IDbCommand = _dbUsersCommandProvider.GetGetDataByNameDbCommand(Name)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Users)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Users( reader.GetString("Name") ,  reader.GetString("FirstName") ,  reader.GetString("LastName") ,  reader.GetString("Email") ,  reader.GetString("PasswordHash") ,  reader.GetString("PasswordSalt") ,  reader.GetString("PasswordQuestion") ,  reader.GetString("PasswordAnswerHash") ,  reader.GetString("PasswordAnswerSalt") ,  reader.GetString("UserType") , reader("ProfileReset"))
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Function GetDataByPasswordQuestion returns a IDataReader for Users
    ''' </summary>
   ''' <param name="PasswordQuestion"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataByPasswordQuestion( ByVal passwordQuestion As String)  as ICollection(Of Users) Implements IUsersRepository.GetDataByPasswordQuestion
        Dim command As IDbCommand = _dbUsersCommandProvider.GetGetDataByPasswordQuestionDbCommand(PasswordQuestion)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Users)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Users( reader.GetString("Name") ,  reader.GetString("FirstName") ,  reader.GetString("LastName") ,  reader.GetString("Email") ,  reader.GetString("PasswordHash") ,  reader.GetString("PasswordSalt") ,  reader.GetString("PasswordQuestion") ,  reader.GetString("PasswordAnswerHash") ,  reader.GetString("PasswordAnswerSalt") ,  reader.GetString("UserType") , reader("ProfileReset"))
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Function GetDataByPasswordQuestionPageable returns a IDataReader populated with a subset of data from Users
    ''' </summary>
   ''' <param name="PasswordQuestion"></param>
   ''' <param name="sortExpression"></param>
   ''' <param name="page"></param>
   ''' <param name="pageSize"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataByPasswordQuestionPageable( ByVal passwordQuestion As String,  ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32)  as ICollection(Of Users) Implements IUsersRepository.GetDataByPasswordQuestionPageable
        Dim command As IDbCommand = _dbUsersCommandProvider.GetGetDataByPasswordQuestionPageableDbCommand(PasswordQuestion, sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Users)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Users( reader.GetString("Name") ,  reader.GetString("FirstName") ,  reader.GetString("LastName") ,  reader.GetString("Email") ,  reader.GetString("PasswordHash") ,  reader.GetString("PasswordSalt") ,  reader.GetString("PasswordQuestion") ,  reader.GetString("PasswordAnswerHash") ,  reader.GetString("PasswordAnswerSalt") ,  reader.GetString("UserType") , reader("ProfileReset"))
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Function GetRowCount returns the row count for Users
    ''' </summary>
   ''' <param name="PasswordQuestion"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataByPasswordQuestionRowCount( ByVal passwordQuestion As String)  as Int32 Implements IUsersRepository.GetDataByPasswordQuestionRowCount
        Dim command As IDbCommand = _dbUsersCommandProvider.GetGetDataByPasswordQuestionRowCountDbCommand(PasswordQuestion)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
   
  
#Region "IDisposable Support"
        Private disposedValue As Boolean
        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
#End Region
 
  End Class 
End NameSpace
