'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Collections.Generic
Imports IssueVision.Data
Imports IssueVision.Domain.Entities
Imports IssueVision.Data.DbCommandProvider
Imports System.Collections.ObjectModel

  
Namespace IssueVision.Data.Repository    
    
    <Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Public Class DbAttributesRepository
        Implements IAttributesRepository
        Implements IDisposable

        Private ReadOnly _dbAttributesCommandProvider As IDbAttributesCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(ByVal dbAttributesCommandProvider As IDbAttributesCommandProvider)
            _dbAttributesCommandProvider = dbAttributesCommandProvider
            _dbConnHolder =_dbAttributesCommandProvider.AttributesDbConnectionHolder
        End Sub

      
    ''' <summary>
    ''' Selects one or more records from the Attributes table 
    ''' </summary>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)> _ 
    Public Function GetData()  as ICollection(Of Attributes) Implements IAttributesRepository.GetData
        Dim command As IDbCommand = _dbAttributesCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Attributes)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Attributes(CType(reader("ID"), Guid), CLng(reader("IssueID")), reader.GetString("AttributeName"), reader.GetString("Value"))
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Updates one or more records from the Attributes table 
    ''' </summary>
   ''' <param name="ID"></param>
   ''' <param name="IssueID"></param>
   ''' <param name="AttributeName"></param>
   ''' <param name="Value"></param>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)> _ 
    Public Sub Update( ByVal iD As Guid,  ByVal issueID As Int64,  ByVal attributeName As String,  ByVal value As String)  Implements IAttributesRepository.Update
        Dim command As IDbCommand = _dbAttributesCommandProvider.GetUpdateDbCommand(ID, IssueID, AttributeName, Value)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
          Command.ExecuteNonQuery
            _dbConnHolder.Close()
    End Sub
  
    ''' <summary>
    ''' Updates one or more records from the Attributes table 
    ''' </summary>
    ''' <param name="Attributes"></param>
    ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, False)> _ 
    Public Sub Update(ByVal attributes as Attributes)  Implements IAttributesRepository.Update
             With Attributes
Update( CType(.ID, Guid), .IssueID,  CStr(.AttributeName),  CStr(.Value))
       End With

    End Sub
  
    ''' <summary>
    ''' Inserts an entity of Attributes into the database.
    ''' </summary>
   ''' <param name="ID"></param>
   ''' <param name="IssueID"></param>
   ''' <param name="AttributeName"></param>
   ''' <param name="Value"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)> _ 
    Public Function Insert( ByVal iD As Guid,  ByVal issueID As Int64,  ByVal attributeName As String,  ByVal value As String)  as Guid Implements IAttributesRepository.Insert
        Dim command As IDbCommand = _dbAttributesCommandProvider.GetInsertDbCommand(ID, IssueID, AttributeName, Value)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim returnValue As Guid = New Guid(command.ExecuteScalar().ToString)
            _dbConnHolder.Close()
            Return returnValue 

    End Function
  
    ''' <summary>
    ''' Inserts an entity of Attributes into the database.
    ''' </summary>
    ''' <param name="Attributes"></param>
    ''' <returns></returns>
    ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, False)> _ 
    Public Function Insert(ByVal attributes as Attributes)  as Guid Implements IAttributesRepository.Insert
             With Attributes
 Return Insert( CType(.ID, Guid), .IssueID,  CStr(.AttributeName),  CStr(.Value))
       End With

    End Function
  
    ''' <summary>
    ''' Deletes one or more records from the Attributes table 
    ''' </summary>
   ''' <param name="ID"></param>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)> _ 
    Public Sub Delete( ByVal iD As Guid)  Implements IAttributesRepository.Delete
        Dim command As IDbCommand = _dbAttributesCommandProvider.GetDeleteDbCommand(ID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
          Command.ExecuteNonQuery
            _dbConnHolder.Close()
    End Sub
  
    ''' <summary>
    ''' Deletes one or more records from the Attributes table 
    ''' </summary>
    ''' <param name="Attributes"></param>
    ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, False)> _ 
    Public Sub Delete(ByVal attributes as Attributes)  Implements IAttributesRepository.Delete
             With Attributes
Delete( CType(.ID, Guid))
       End With

    End Sub
  
    ''' <summary>
    ''' Function GetDataPageable returns a IDataReader populated with a subset of data from Attributes
    ''' </summary>
   ''' <param name="sortExpression"></param>
   ''' <param name="page"></param>
   ''' <param name="pageSize"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataPageable( ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32)  as ICollection(Of Attributes) Implements IAttributesRepository.GetDataPageable
        Dim command As IDbCommand = _dbAttributesCommandProvider.GetGetDataPageableDbCommand(sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Attributes)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Attributes(CType(reader("ID"), Guid), CLng(reader("IssueID")), reader.GetString("AttributeName"), reader.GetString("Value"))
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Function GetRowCount returns the row count for Attributes
    ''' </summary>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetRowCount()  as Int32 Implements IAttributesRepository.GetRowCount
        Dim command As IDbCommand = _dbAttributesCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
  
    ''' <summary>
    ''' Function GetDataByID returns a IDataReader for Attributes
    ''' </summary>
   ''' <param name="ID"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataByID( ByVal iD As Guid)  as ICollection(Of Attributes) Implements IAttributesRepository.GetDataByID
        Dim command As IDbCommand = _dbAttributesCommandProvider.GetGetDataByIDDbCommand(ID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Attributes)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Attributes(CType(reader("ID"), Guid), CLng(reader("IssueID")), reader.GetString("AttributeName"), reader.GetString("Value"))
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Function GetDataByIssueID returns a IDataReader for Attributes
    ''' </summary>
   ''' <param name="IssueID"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataByIssueID( ByVal issueID As Int64)  as ICollection(Of Attributes) Implements IAttributesRepository.GetDataByIssueID
        Dim command As IDbCommand = _dbAttributesCommandProvider.GetGetDataByIssueIDDbCommand(IssueID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Attributes)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Attributes(CType(reader("ID"), Guid), CLng(reader("IssueID")), reader.GetString("AttributeName"), reader.GetString("Value"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function

        ''' <summary>
        ''' Function GetDataByIssueIDPageable returns a IDataReader populated with a subset of data from Attributes
        ''' </summary>
        ''' <param name="IssueID"></param>
        ''' <param name="sortExpression"></param>
        ''' <param name="page"></param>
        ''' <param name="pageSize"></param>''' <returns></returns>
        ''' <remarks></remarks> 
        <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], False)> _
        Public Function GetDataByIssueIDPageable(ByVal issueID As Int64, ByVal sortExpression As String, ByVal page As Int32, ByVal pageSize As Int32) As ICollection(Of Attributes) Implements IAttributesRepository.GetDataByIssueIDPageable
            Dim command As IDbCommand = _dbAttributesCommandProvider.GetGetDataByIssueIDPageableDbCommand(IssueID, sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
            Dim entList As New Collection(Of Attributes)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                Dim tempEntity As New Attributes(CType(reader("ID"), Guid), CLng(reader("IssueID")), reader.GetString("AttributeName"), reader.GetString("Value"))
                entList.Add(tempEntity)
            Loop
            reader.Close()
            Return entList

        End Function
  
    ''' <summary>
    ''' Function GetRowCount returns the row count for Attributes
    ''' </summary>
   ''' <param name="IssueID"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataByIssueIDRowCount( ByVal issueID As Int64)  as Int32 Implements IAttributesRepository.GetDataByIssueIDRowCount
        Dim command As IDbCommand = _dbAttributesCommandProvider.GetGetDataByIssueIDRowCountDbCommand(IssueID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
   
  
#Region "IDisposable Support"
        Private disposedValue As Boolean
        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
#End Region
 
  End Class 
End NameSpace
