'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Collections.Generic
Imports IssueVision.Data
Imports IssueVision.Domain.Entities
Imports IssueVision.Data.DbCommandProvider
Imports System.Collections.ObjectModel

  
Namespace IssueVision.Data.Repository    
    
    <Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Public Class DbPlatformsRepository
        Implements IPlatformsRepository
        Implements IDisposable

        Private ReadOnly _dbPlatformsCommandProvider As IDbPlatformsCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(ByVal dbPlatformsCommandProvider As IDbPlatformsCommandProvider)
            _dbPlatformsCommandProvider = dbPlatformsCommandProvider
            _dbConnHolder =_dbPlatformsCommandProvider.PlatformsDbConnectionHolder
        End Sub

      
    ''' <summary>
    ''' Selects one or more records from the Platforms table 
    ''' </summary>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)> _ 
    Public Function GetData()  as ICollection(Of Platforms) Implements IPlatformsRepository.GetData
        Dim command As IDbCommand = _dbPlatformsCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Platforms)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Platforms( reader.GetInt32("PlatformID"),  reader.GetString("Browser") ,  reader.GetString("BrowserVersion") ,  reader.GetString("OS") ,  reader.GetString("OSVersion") ,  reader.GetString("Language") ,  reader.GetString("Processor") )
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Updates one or more records from the Platforms table 
    ''' </summary>
   ''' <param name="PlatformID"></param>
   ''' <param name="Browser"></param>
   ''' <param name="BrowserVersion"></param>
   ''' <param name="OS"></param>
   ''' <param name="OSVersion"></param>
   ''' <param name="Language"></param>
   ''' <param name="Processor"></param>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)> _ 
    Public Sub Update( ByVal platformID As Int32,  ByVal browser As String,  ByVal browserVersion As String,  ByVal oS As String,  ByVal oSVersion As String,  ByVal language As String,  ByVal processor As String)  Implements IPlatformsRepository.Update
        Dim command As IDbCommand = _dbPlatformsCommandProvider.GetUpdateDbCommand(PlatformID, Browser, BrowserVersion, OS, OSVersion, Language, Processor)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
          Command.ExecuteNonQuery
            _dbConnHolder.Close()
    End Sub
  
    ''' <summary>
    ''' Updates one or more records from the Platforms table 
    ''' </summary>
    ''' <param name="Platforms"></param>
    ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, False)> _ 
    Public Sub Update(ByVal platforms as Platforms)  Implements IPlatformsRepository.Update
             With Platforms
Update( CInt(.PlatformID),  CStr(.Browser),  CStr(.BrowserVersion),  CStr(.OS),  CStr(.OSVersion), .Language, .Processor)
       End With

    End Sub
  
    ''' <summary>
    ''' Inserts an entity of Platforms into the database.
    ''' </summary>
   ''' <param name="PlatformID"></param>
   ''' <param name="Browser"></param>
   ''' <param name="BrowserVersion"></param>
   ''' <param name="OS"></param>
   ''' <param name="OSVersion"></param>
   ''' <param name="Language"></param>
   ''' <param name="Processor"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)> _ 
    Public Function Insert( ByVal platformID As Int32,  ByVal browser As String,  ByVal browserVersion As String,  ByVal oS As String,  ByVal oSVersion As String,  ByVal language As String,  ByVal processor As String)  as Int32 Implements IPlatformsRepository.Insert
        Dim command As IDbCommand = _dbPlatformsCommandProvider.GetInsertDbCommand(PlatformID, Browser, BrowserVersion, OS, OSVersion, Language, Processor)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
  
    ''' <summary>
    ''' Inserts an entity of Platforms into the database.
    ''' </summary>
    ''' <param name="Platforms"></param>
    ''' <returns></returns>
    ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, False)> _ 
    Public Function Insert(ByVal platforms as Platforms)  as Int32 Implements IPlatformsRepository.Insert
             With Platforms
 Return Insert( CInt(.PlatformID),  CStr(.Browser),  CStr(.BrowserVersion),  CStr(.OS),  CStr(.OSVersion), .Language, .Processor)
       End With

    End Function
  
    ''' <summary>
    ''' Deletes one or more records from the Platforms table 
    ''' </summary>
   ''' <param name="PlatformID"></param>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)> _ 
    Public Sub Delete( ByVal platformID As Int32)  Implements IPlatformsRepository.Delete
        Dim command As IDbCommand = _dbPlatformsCommandProvider.GetDeleteDbCommand(PlatformID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
          Command.ExecuteNonQuery
            _dbConnHolder.Close()
    End Sub
  
    ''' <summary>
    ''' Deletes one or more records from the Platforms table 
    ''' </summary>
    ''' <param name="Platforms"></param>
    ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, False)> _ 
    Public Sub Delete(ByVal platforms as Platforms)  Implements IPlatformsRepository.Delete
             With Platforms
Delete( CInt(.PlatformID))
       End With

    End Sub
  
    ''' <summary>
    ''' Function GetDataPageable returns a IDataReader populated with a subset of data from Platforms
    ''' </summary>
   ''' <param name="sortExpression"></param>
   ''' <param name="page"></param>
   ''' <param name="pageSize"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataPageable( ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32)  as ICollection(Of Platforms) Implements IPlatformsRepository.GetDataPageable
        Dim command As IDbCommand = _dbPlatformsCommandProvider.GetGetDataPageableDbCommand(sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Platforms)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Platforms( reader.GetInt32("PlatformID"),  reader.GetString("Browser") ,  reader.GetString("BrowserVersion") ,  reader.GetString("OS") ,  reader.GetString("OSVersion") ,  reader.GetString("Language") ,  reader.GetString("Processor") )
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Function GetRowCount returns the row count for Platforms
    ''' </summary>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetRowCount()  as Int32 Implements IPlatformsRepository.GetRowCount
        Dim command As IDbCommand = _dbPlatformsCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
  
    ''' <summary>
    ''' Function GetDataByPlatformID returns a IDataReader for Platforms
    ''' </summary>
   ''' <param name="PlatformID"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataByPlatformID( ByVal platformID As Int32)  as ICollection(Of Platforms) Implements IPlatformsRepository.GetDataByPlatformID
        Dim command As IDbCommand = _dbPlatformsCommandProvider.GetGetDataByPlatformIDDbCommand(PlatformID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of Platforms)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New Platforms( reader.GetInt32("PlatformID"),  reader.GetString("Browser") ,  reader.GetString("BrowserVersion") ,  reader.GetString("OS") ,  reader.GetString("OSVersion") ,  reader.GetString("Language") ,  reader.GetString("Processor") )
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
   
  
#Region "IDisposable Support"
        Private disposedValue As Boolean
        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
#End Region
 
  End Class 
End NameSpace
