'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Collections.Generic
Imports IssueVision.Data
Imports IssueVision.Domain.Entities
Imports IssueVision.Data.DbCommandProvider
Imports System.Collections.ObjectModel

  
Namespace IssueVision.Data.Repository    
    
    <Global.System.ComponentModel.DataObjectAttribute(true)>  _
    Public Class DbIssueHistoryRepository
        Implements IIssueHistoryRepository
        Implements IDisposable

        Private ReadOnly _dbIssueHistoryCommandProvider As IDbIssueHistoryCommandProvider
        Private _dbConnHolder As DbConnectionHolder = Nothing

        Public Sub New(ByVal dbIssueHistoryCommandProvider As IDbIssueHistoryCommandProvider)
            _dbIssueHistoryCommandProvider = dbIssueHistoryCommandProvider
            _dbConnHolder =_dbIssueHistoryCommandProvider.IssueHistoryDbConnectionHolder
        End Sub

      
    ''' <summary>
    ''' Selects one or more records from the IssueHistory table 
    ''' </summary>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)> _ 
    Public Function GetData()  as ICollection(Of IssueHistory) Implements IIssueHistoryRepository.GetData
        Dim command As IDbCommand = _dbIssueHistoryCommandProvider.GetGetDataDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of IssueHistory)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New IssueHistory( reader.GetInt32("IssueHistoryID"), CLng(reader("IssueID")),  reader.GetString("Title") , CByte(reader("StatusID")), reader("SubStatusID"),  reader.GetString("AssignedToID") , reader("IssueTypeID"), reader("Severity"), reader("Priority"),  reader.GetString("ChangedByID") ,  reader.GetDateTime("LastChange"),  reader.GetDateTime("OpenedDate"),  reader.GetString("OpenedByID") ,  reader.GetNullableInt32("PlatformID"),  reader.GetNullableDateTime("ResolutionDate"), reader("ResolutionID"),  reader.GetString("ResolvedByID") ,  reader.GetString("Description") ,  reader.GetString("ReproSteps") , reader("DuplicateID"),  reader.GetString("Action") ,  reader.GetString("Comment") ,  reader.GetDateTime("DateCreated"))
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Updates one or more records from the IssueHistory table 
    ''' </summary>
   ''' <param name="IssueID"></param>
   ''' <param name="Title"></param>
   ''' <param name="StatusID"></param>
   ''' <param name="SubStatusID"></param>
   ''' <param name="AssignedToID"></param>
   ''' <param name="IssueTypeID"></param>
   ''' <param name="Severity"></param>
   ''' <param name="Priority"></param>
   ''' <param name="ChangedByID"></param>
   ''' <param name="LastChange"></param>
   ''' <param name="OpenedDate"></param>
   ''' <param name="OpenedByID"></param>
   ''' <param name="PlatformID"></param>
   ''' <param name="ResolutionDate"></param>
   ''' <param name="ResolutionID"></param>
   ''' <param name="ResolvedByID"></param>
   ''' <param name="Description"></param>
   ''' <param name="ReproSteps"></param>
   ''' <param name="DuplicateID"></param>
   ''' <param name="Action"></param>
   ''' <param name="Comment"></param>
   ''' <param name="DateCreated"></param>
   ''' <param name="IssueHistoryID"></param>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)> _ 
    Public Sub Update( ByVal issueID As Int64,  ByVal title As String,  ByVal statusID As Byte,  ByVal subStatusID As  Nullable(Of Byte) ,  ByVal assignedToID As String,  ByVal issueTypeID As Byte,  ByVal severity As Byte,  ByVal priority As Byte,  ByVal changedByID As String,  ByVal lastChange As DateTime,  ByVal openedDate As DateTime,  ByVal openedByID As String,  ByVal platformID As  Nullable(Of Int32) ,  ByVal resolutionDate As  Nullable(Of DateTime) ,  ByVal resolutionID As  Nullable(Of Byte) ,  ByVal resolvedByID As String,  ByVal description As String,  ByVal reproSteps As String,  ByVal duplicateID As  Nullable(Of Int64) ,  ByVal action As String,  ByVal comment As String,  ByVal dateCreated As DateTime,  ByVal issueHistoryID As Int32)  Implements IIssueHistoryRepository.Update
        Dim command As IDbCommand = _dbIssueHistoryCommandProvider.GetUpdateDbCommand(IssueID, Title, StatusID, SubStatusID, AssignedToID, IssueTypeID, Severity, Priority, ChangedByID, LastChange, OpenedDate, OpenedByID, PlatformID, ResolutionDate, ResolutionID, ResolvedByID, Description, ReproSteps, DuplicateID, Action, Comment, DateCreated, IssueHistoryID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
          Command.ExecuteNonQuery
            _dbConnHolder.Close()
    End Sub
  
    ''' <summary>
    ''' Updates one or more records from the IssueHistory table 
    ''' </summary>
    ''' <param name="IssueHistory"></param>
    ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, False)> _ 
    Public Sub Update(ByVal issueHistory as IssueHistory)  Implements IIssueHistoryRepository.Update
             With IssueHistory
Update(.IssueID,  CStr(.Title), .StatusID, .SubStatusID, .AssignedToID, .IssueTypeID, .Severity, .Priority,  CStr(.ChangedByID),  CDate(.LastChange),  CDate(.OpenedDate),  CStr(.OpenedByID), .PlatformID, .ResolutionDate, .ResolutionID, .ResolvedByID, .Description, .ReproSteps, .DuplicateID,  CStr(.Action), .Comment,  CDate(.DateCreated),  CInt(.IssueHistoryID))
       End With

    End Sub
  
    ''' <summary>
    ''' Inserts an entity of IssueHistory into the database.
    ''' </summary>
   ''' <param name="IssueID"></param>
   ''' <param name="Title"></param>
   ''' <param name="StatusID"></param>
   ''' <param name="SubStatusID"></param>
   ''' <param name="AssignedToID"></param>
   ''' <param name="IssueTypeID"></param>
   ''' <param name="Severity"></param>
   ''' <param name="Priority"></param>
   ''' <param name="ChangedByID"></param>
   ''' <param name="LastChange"></param>
   ''' <param name="OpenedDate"></param>
   ''' <param name="OpenedByID"></param>
   ''' <param name="PlatformID"></param>
   ''' <param name="ResolutionDate"></param>
   ''' <param name="ResolutionID"></param>
   ''' <param name="ResolvedByID"></param>
   ''' <param name="Description"></param>
   ''' <param name="ReproSteps"></param>
   ''' <param name="DuplicateID"></param>
   ''' <param name="Action"></param>
   ''' <param name="Comment"></param>
   ''' <param name="DateCreated"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)> _ 
    Public Function Insert( ByVal issueID As Int64,  ByVal title As String,  ByVal statusID As Byte,  ByVal subStatusID As  Nullable(Of Byte) ,  ByVal assignedToID As String,  ByVal issueTypeID As Byte,  ByVal severity As Byte,  ByVal priority As Byte,  ByVal changedByID As String,  ByVal lastChange As DateTime,  ByVal openedDate As DateTime,  ByVal openedByID As String,  ByVal platformID As  Nullable(Of Int32) ,  ByVal resolutionDate As  Nullable(Of DateTime) ,  ByVal resolutionID As  Nullable(Of Byte) ,  ByVal resolvedByID As String,  ByVal description As String,  ByVal reproSteps As String,  ByVal duplicateID As  Nullable(Of Int64) ,  ByVal action As String,  ByVal comment As String,  ByVal dateCreated As DateTime)  as Int32 Implements IIssueHistoryRepository.Insert
        Dim command As IDbCommand = _dbIssueHistoryCommandProvider.GetInsertDbCommand(IssueID, Title, StatusID, SubStatusID, AssignedToID, IssueTypeID, Severity, Priority, ChangedByID, LastChange, OpenedDate, OpenedByID, PlatformID, ResolutionDate, ResolutionID, ResolvedByID, Description, ReproSteps, DuplicateID, Action, Comment, DateCreated)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
  
    ''' <summary>
    ''' Inserts an entity of IssueHistory into the database.
    ''' </summary>
    ''' <param name="IssueHistory"></param>
    ''' <returns></returns>
    ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, False)> _ 
    Public Function Insert(ByVal issueHistory as IssueHistory)  as Int32 Implements IIssueHistoryRepository.Insert
             With IssueHistory
 Return Insert(.IssueID,  CStr(.Title), .StatusID, .SubStatusID, .AssignedToID, .IssueTypeID, .Severity, .Priority,  CStr(.ChangedByID),  CDate(.LastChange),  CDate(.OpenedDate),  CStr(.OpenedByID), .PlatformID, .ResolutionDate, .ResolutionID, .ResolvedByID, .Description, .ReproSteps, .DuplicateID,  CStr(.Action), .Comment,  CDate(.DateCreated))
       End With

    End Function
  
    ''' <summary>
    ''' Deletes one or more records from the IssueHistory table 
    ''' </summary>
   ''' <param name="IssueHistoryID"></param>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)> _ 
    Public Sub Delete( ByVal issueHistoryID As Int32)  Implements IIssueHistoryRepository.Delete
        Dim command As IDbCommand = _dbIssueHistoryCommandProvider.GetDeleteDbCommand(IssueHistoryID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
          Command.ExecuteNonQuery
            _dbConnHolder.Close()
    End Sub
  
    ''' <summary>
    ''' Deletes one or more records from the IssueHistory table 
    ''' </summary>
    ''' <param name="IssueHistory"></param>
    ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, False)> _ 
    Public Sub Delete(ByVal issueHistory as IssueHistory)  Implements IIssueHistoryRepository.Delete
             With IssueHistory
Delete( CInt(.IssueHistoryID))
       End With

    End Sub
  
    ''' <summary>
    ''' Function GetDataPageable returns a IDataReader populated with a subset of data from IssueHistory
    ''' </summary>
   ''' <param name="sortExpression"></param>
   ''' <param name="page"></param>
   ''' <param name="pageSize"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataPageable( ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32)  as ICollection(Of IssueHistory) Implements IIssueHistoryRepository.GetDataPageable
        Dim command As IDbCommand = _dbIssueHistoryCommandProvider.GetGetDataPageableDbCommand(sortExpression, page, pageSize)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of IssueHistory)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New IssueHistory( reader.GetInt32("IssueHistoryID"), CLng(reader("IssueID")),  reader.GetString("Title") , CByte(reader("StatusID")), reader("SubStatusID"),  reader.GetString("AssignedToID") , reader("IssueTypeID"), reader("Severity"), reader("Priority"),  reader.GetString("ChangedByID") ,  reader.GetDateTime("LastChange"),  reader.GetDateTime("OpenedDate"),  reader.GetString("OpenedByID") ,  reader.GetNullableInt32("PlatformID"),  reader.GetNullableDateTime("ResolutionDate"), reader("ResolutionID"),  reader.GetString("ResolvedByID") ,  reader.GetString("Description") ,  reader.GetString("ReproSteps") , reader("DuplicateID"),  reader.GetString("Action") ,  reader.GetString("Comment") ,  reader.GetDateTime("DateCreated"))
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
  
    ''' <summary>
    ''' Function GetRowCount returns the row count for IssueHistory
    ''' </summary>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetRowCount()  as Int32 Implements IIssueHistoryRepository.GetRowCount
        Dim command As IDbCommand = _dbIssueHistoryCommandProvider.GetGetRowCountDbCommand()
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim returnValue As Int32  = Convert.ToInt32(Command.ExecuteScalar())
            _dbConnHolder.Close()
            Return returnValue 

    End Function
  
    ''' <summary>
    ''' Function GetDataByIssueHistoryID returns a IDataReader for IssueHistory
    ''' </summary>
   ''' <param name="IssueHistoryID"></param>''' <returns></returns>
   ''' <remarks></remarks> 
  <Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)> _ 
    Public Function GetDataByIssueHistoryID( ByVal issueHistoryID As Int32)  as ICollection(Of IssueHistory) Implements IIssueHistoryRepository.GetDataByIssueHistoryID
        Dim command As IDbCommand = _dbIssueHistoryCommandProvider.GetGetDataByIssueHistoryIDDbCommand(IssueHistoryID)
            command.Connection = _dbConnHolder.Connection
            _dbConnHolder.Open()
              Dim entList as new Collection(Of IssueHistory)
            Dim reader As New SafeDataReader(command.ExecuteReader(CommandBehavior.CloseConnection))
            Do While (reader.Read())
                 Dim tempEntity As New IssueHistory( reader.GetInt32("IssueHistoryID"), CLng(reader("IssueID")),  reader.GetString("Title") , CByte(reader("StatusID")), reader("SubStatusID"),  reader.GetString("AssignedToID") , reader("IssueTypeID"), reader("Severity"), reader("Priority"),  reader.GetString("ChangedByID") ,  reader.GetDateTime("LastChange"),  reader.GetDateTime("OpenedDate"),  reader.GetString("OpenedByID") ,  reader.GetNullableInt32("PlatformID"),  reader.GetNullableDateTime("ResolutionDate"), reader("ResolutionID"),  reader.GetString("ResolvedByID") ,  reader.GetString("Description") ,  reader.GetString("ReproSteps") , reader("DuplicateID"),  reader.GetString("Action") ,  reader.GetString("Comment") ,  reader.GetDateTime("DateCreated"))
                 entList.Add(tempEntity)
            Loop
            reader.Close
            Return entList
    
    End Function
   
  
#Region "IDisposable Support"
        Private disposedValue As Boolean
        Protected Overridable Sub Dispose(disposing As Boolean)
            If Not Me.disposedValue Then
                If disposing Then
                    Select Case _dbConnHolder.Connection.State
                        Case ConnectionState.Open
                            _dbConnHolder.Close()
                    End Select
                    _dbConnHolder = Nothing
                End If

            End If
            Me.disposedValue = True
        End Sub

        Public Sub Dispose() Implements IDisposable.Dispose
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
#End Region
 
  End Class 
End NameSpace
