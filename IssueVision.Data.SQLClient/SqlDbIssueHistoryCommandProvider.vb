'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.Data.SqlClient
Imports IssueVision.Data.DbCommandProvider

Namespace IssueVision.Data.SqlDbCommandProvider 

  
Public Class SqlDbIssueHistoryCommandProvider
      Implements IDbIssueHistoryCommandProvider
    
      ReadOnly _dbConnHolder As DbConnectionHolder

      Public Sub New()
          _dbConnHolder = New DbConnectionHolder(DbConnectionName)
      End Sub

      Public ReadOnly Property DbConnectionName() As String Implements IDbIssueHistoryCommandProvider.DbConnectionName
          Get
              Return "IssueVisionConnection"
          End Get
      End Property

      Public ReadOnly Property IssueHistoryDbConnectionHolder() As DbConnectionHolder Implements IDbIssueHistoryCommandProvider.IssueHistoryDbConnectionHolder
          Get
              Return _dbConnHolder
          End Get
      End Property
      
    
        ''' <summary>
        ''' Selects one or more records from the IssueHistory table 
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataDbCommand() As IDbCommand Implements IDbIssueHistoryCommandProvider.GetGetDataDbCommand
            
            Dim command As New SqlCommand("IssueHistory_Select")
            command.CommandType = CommandType.StoredProcedure
    
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Updates one or more records from the IssueHistory table 
        ''' </summary>
      ''' <param name="issueID" />
      ''' <param name="title" />
      ''' <param name="statusID" />
      ''' <param name="subStatusID" />
      ''' <param name="assignedToID" />
      ''' <param name="issueTypeID" />
      ''' <param name="severity" />
      ''' <param name="priority" />
      ''' <param name="changedByID" />
      ''' <param name="lastChange" />
      ''' <param name="openedDate" />
      ''' <param name="openedByID" />
      ''' <param name="platformID" />
      ''' <param name="resolutionDate" />
      ''' <param name="resolutionID" />
      ''' <param name="resolvedByID" />
      ''' <param name="description" />
      ''' <param name="reproSteps" />
      ''' <param name="duplicateID" />
      ''' <param name="action" />
      ''' <param name="comment" />
      ''' <param name="dateCreated" />
      ''' <param name="issueHistoryID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetUpdateDbCommand( ByVal issueID As Int64,  ByVal title As String,  ByVal statusID As Byte,  ByVal subStatusID As  Nullable(Of Byte) ,  ByVal assignedToID As String,  ByVal issueTypeID As Byte,  ByVal severity As Byte,  ByVal priority As Byte,  ByVal changedByID As String,  ByVal lastChange As DateTime,  ByVal openedDate As DateTime,  ByVal openedByID As String,  ByVal platformID As  Nullable(Of Int32) ,  ByVal resolutionDate As  Nullable(Of DateTime) ,  ByVal resolutionID As  Nullable(Of Byte) ,  ByVal resolvedByID As String,  ByVal description As String,  ByVal reproSteps As String,  ByVal duplicateID As  Nullable(Of Int64) ,  ByVal action As String,  ByVal comment As String,  ByVal dateCreated As DateTime,  ByVal issueHistoryID As Int32) As IDbCommand Implements IDbIssueHistoryCommandProvider.GetUpdateDbCommand
            
            Dim command As New SqlCommand("IssueHistory_Update")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@IssueID", SqlDbType.bigint, issueID))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Title", SqlDbType.ntext, title))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@StatusID", SqlDbType.tinyint, statusID))
      
            If (SubStatusID.HasValue = true ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@SubStatusID", SqlDbType.tinyint, subStatusID))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@SubStatusID", SqlDbType.tinyint, global.System.DBNull.Value))
      End If
        
            If (Not assignedToID  Is Nothing ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@AssignedToID", SqlDbType.nvarchar, assignedToID))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@AssignedToID", SqlDbType.nvarchar, global.System.DBNull.Value))
      End If
                    command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@IssueTypeID", SqlDbType.tinyint, issueTypeID))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Severity", SqlDbType.tinyint, severity))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Priority", SqlDbType.tinyint, priority))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ChangedByID", SqlDbType.nvarchar, changedByID))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@LastChange", SqlDbType.datetime, lastChange))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@OpenedDate", SqlDbType.datetime, openedDate))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@OpenedByID", SqlDbType.nvarchar, openedByID))
      
            If (PlatformID.HasValue = true ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PlatformID", SqlDbType.int, platformID))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PlatformID", SqlDbType.int, global.System.DBNull.Value))
      End If
        
            If (ResolutionDate.HasValue = true ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolutionDate", SqlDbType.datetime, resolutionDate))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolutionDate", SqlDbType.datetime, global.System.DBNull.Value))
      End If
        
            If (ResolutionID.HasValue = true ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolutionID", SqlDbType.tinyint, resolutionID))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolutionID", SqlDbType.tinyint, global.System.DBNull.Value))
      End If
        
            If (Not resolvedByID  Is Nothing ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolvedByID", SqlDbType.nvarchar, resolvedByID))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolvedByID", SqlDbType.nvarchar, global.System.DBNull.Value))
      End If
        
            If (Not description  Is Nothing ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Description", SqlDbType.ntext, description))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Description", SqlDbType.ntext, global.System.DBNull.Value))
      End If
        
            If (Not reproSteps  Is Nothing ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ReproSteps", SqlDbType.ntext, reproSteps))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ReproSteps", SqlDbType.ntext, global.System.DBNull.Value))
      End If
        
            If (DuplicateID.HasValue = true ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@DuplicateID", SqlDbType.bigint, duplicateID))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@DuplicateID", SqlDbType.bigint, global.System.DBNull.Value))
      End If
                    command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Action", SqlDbType.nvarchar, action))
      
            If (Not comment  Is Nothing ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Comment", SqlDbType.nvarchar, comment))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Comment", SqlDbType.nvarchar, global.System.DBNull.Value))
      End If
                    command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@DateCreated", SqlDbType.datetime, dateCreated))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@IssueHistoryID", SqlDbType.int, issueHistoryID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Inserts a record into the IssueHistory table on the database.
        ''' </summary>
      ''' <param name="issueID" />
      ''' <param name="title" />
      ''' <param name="statusID" />
      ''' <param name="subStatusID" />
      ''' <param name="assignedToID" />
      ''' <param name="issueTypeID" />
      ''' <param name="severity" />
      ''' <param name="priority" />
      ''' <param name="changedByID" />
      ''' <param name="lastChange" />
      ''' <param name="openedDate" />
      ''' <param name="openedByID" />
      ''' <param name="platformID" />
      ''' <param name="resolutionDate" />
      ''' <param name="resolutionID" />
      ''' <param name="resolvedByID" />
      ''' <param name="description" />
      ''' <param name="reproSteps" />
      ''' <param name="duplicateID" />
      ''' <param name="action" />
      ''' <param name="comment" />
      ''' <param name="dateCreated" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetInsertDbCommand( ByVal issueID As Int64,  ByVal title As String,  ByVal statusID As Byte,  ByVal subStatusID As  Nullable(Of Byte) ,  ByVal assignedToID As String,  ByVal issueTypeID As Byte,  ByVal severity As Byte,  ByVal priority As Byte,  ByVal changedByID As String,  ByVal lastChange As DateTime,  ByVal openedDate As DateTime,  ByVal openedByID As String,  ByVal platformID As  Nullable(Of Int32) ,  ByVal resolutionDate As  Nullable(Of DateTime) ,  ByVal resolutionID As  Nullable(Of Byte) ,  ByVal resolvedByID As String,  ByVal description As String,  ByVal reproSteps As String,  ByVal duplicateID As  Nullable(Of Int64) ,  ByVal action As String,  ByVal comment As String,  ByVal dateCreated As DateTime) As IDbCommand Implements IDbIssueHistoryCommandProvider.GetInsertDbCommand
            
            Dim command As New SqlCommand("IssueHistory_Insert")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@IssueID", SqlDbType.bigint, issueID))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Title", SqlDbType.ntext, title))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@StatusID", SqlDbType.tinyint, statusID))
      
            If (SubStatusID.HasValue = true ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@SubStatusID", SqlDbType.tinyint, subStatusID))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@SubStatusID", SqlDbType.tinyint, global.System.DBNull.Value))
      End If
        
            If (Not assignedToID  Is Nothing ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@AssignedToID", SqlDbType.nvarchar, assignedToID))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@AssignedToID", SqlDbType.nvarchar, global.System.DBNull.Value))
      End If
                    command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@IssueTypeID", SqlDbType.tinyint, issueTypeID))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Severity", SqlDbType.tinyint, severity))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Priority", SqlDbType.tinyint, priority))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ChangedByID", SqlDbType.nvarchar, changedByID))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@LastChange", SqlDbType.datetime, lastChange))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@OpenedDate", SqlDbType.datetime, openedDate))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@OpenedByID", SqlDbType.nvarchar, openedByID))
      
            If (PlatformID.HasValue = true ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PlatformID", SqlDbType.int, platformID))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PlatformID", SqlDbType.int, global.System.DBNull.Value))
      End If
        
            If (ResolutionDate.HasValue = true ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolutionDate", SqlDbType.datetime, resolutionDate))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolutionDate", SqlDbType.datetime, global.System.DBNull.Value))
      End If
        
            If (ResolutionID.HasValue = true ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolutionID", SqlDbType.tinyint, resolutionID))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolutionID", SqlDbType.tinyint, global.System.DBNull.Value))
      End If
        
            If (Not resolvedByID  Is Nothing ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolvedByID", SqlDbType.nvarchar, resolvedByID))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolvedByID", SqlDbType.nvarchar, global.System.DBNull.Value))
      End If
        
            If (Not description  Is Nothing ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Description", SqlDbType.ntext, description))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Description", SqlDbType.ntext, global.System.DBNull.Value))
      End If
        
            If (Not reproSteps  Is Nothing ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ReproSteps", SqlDbType.ntext, reproSteps))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ReproSteps", SqlDbType.ntext, global.System.DBNull.Value))
      End If
        
            If (DuplicateID.HasValue = true ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@DuplicateID", SqlDbType.bigint, duplicateID))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@DuplicateID", SqlDbType.bigint, global.System.DBNull.Value))
      End If
                    command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Action", SqlDbType.nvarchar, action))
      
            If (Not comment  Is Nothing ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Comment", SqlDbType.nvarchar, comment))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Comment", SqlDbType.nvarchar, global.System.DBNull.Value))
      End If
                    command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@DateCreated", SqlDbType.datetime, dateCreated))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Deletes one or more records from the IssueHistory table 
        ''' </summary>
      ''' <param name="issueHistoryID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetDeleteDbCommand( ByVal issueHistoryID As Int32) As IDbCommand Implements IDbIssueHistoryCommandProvider.GetDeleteDbCommand
            
            Dim command As New SqlCommand("IssueHistory_Delete")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@IssueHistoryID", SqlDbType.int, issueHistoryID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataPageable returns a IDataReader populated with a subset of data from IssueHistory
        ''' </summary>
      ''' <param name="sortExpression" />
      ''' <param name="page" />
      ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataPageableDbCommand( ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32) As IDbCommand Implements IDbIssueHistoryCommandProvider.GetGetDataPageableDbCommand
            
            Dim command As New SqlCommand("IssueHistory_GetDataPageable")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar, sortExpression))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetRowCount returns the row count for IssueHistory
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetRowCountDbCommand() As IDbCommand Implements IDbIssueHistoryCommandProvider.GetGetRowCountDbCommand
            
            Dim command As New SqlCommand("IssueHistory_GetRowCount")
            command.CommandType = CommandType.StoredProcedure
    
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByIssueHistoryID returns a IDataReader for IssueHistory
        ''' </summary>
      ''' <param name="issueHistoryID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByIssueHistoryIDDbCommand( ByVal issueHistoryID As Int32) As IDbCommand Implements IDbIssueHistoryCommandProvider.GetGetDataByIssueHistoryIDDbCommand
            
            Dim command As New SqlCommand("IssueHistory_GetDataByIssueHistoryID")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@IssueHistoryID", SqlDbType.int, issueHistoryID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
  End Class
 End Namespace
  