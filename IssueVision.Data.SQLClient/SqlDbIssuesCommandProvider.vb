'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.Data.SqlClient
Imports IssueVision.Data.DbCommandProvider

Namespace IssueVision.Data.SqlDbCommandProvider 

  
Public Class SqlDbIssuesCommandProvider
      Implements IDbIssuesCommandProvider
    
      ReadOnly _dbConnHolder As DbConnectionHolder

      Public Sub New()
          _dbConnHolder = New DbConnectionHolder(DbConnectionName)
      End Sub

      Public ReadOnly Property DbConnectionName() As String Implements IDbIssuesCommandProvider.DbConnectionName
          Get
              Return "IssueVisionConnection"
          End Get
      End Property

      Public ReadOnly Property IssuesDbConnectionHolder() As DbConnectionHolder Implements IDbIssuesCommandProvider.IssuesDbConnectionHolder
          Get
              Return _dbConnHolder
          End Get
      End Property
      
    
        ''' <summary>
        ''' Selects one or more records from the Issues table 
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataDbCommand() As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataDbCommand
            
            Dim command As New SqlCommand("Issues_Select")
            command.CommandType = CommandType.StoredProcedure
    
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Updates one or more records from the Issues table 
        ''' </summary>
      ''' <param name="issueID" />
      ''' <param name="title" />
      ''' <param name="statusID" />
      ''' <param name="subStatusID" />
      ''' <param name="assignedToID" />
      ''' <param name="issueTypeID" />
      ''' <param name="severity" />
      ''' <param name="priority" />
      ''' <param name="changedByID" />
      ''' <param name="lastChange" />
      ''' <param name="openedDate" />
      ''' <param name="openedByID" />
      ''' <param name="platformID" />
      ''' <param name="resolutionDate" />
      ''' <param name="resolutionID" />
      ''' <param name="resolvedByID" />
      ''' <param name="description" />
      ''' <param name="reproSteps" />
      ''' <param name="duplicateID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetUpdateDbCommand( ByVal issueID As Int64,  ByVal title As String,  ByVal statusID As Byte,  ByVal subStatusID As  Nullable(Of Byte) ,  ByVal assignedToID As String,  ByVal issueTypeID As Byte,  ByVal severity As Byte,  ByVal priority As Byte,  ByVal changedByID As String,  ByVal lastChange As DateTime,  ByVal openedDate As DateTime,  ByVal openedByID As String,  ByVal platformID As  Nullable(Of Int32) ,  ByVal resolutionDate As  Nullable(Of DateTime) ,  ByVal resolutionID As  Nullable(Of Byte) ,  ByVal resolvedByID As String,  ByVal description As String,  ByVal reproSteps As String,  ByVal duplicateID As  Nullable(Of Int64) ) As IDbCommand Implements IDbIssuesCommandProvider.GetUpdateDbCommand
            
            Dim command As New SqlCommand("Issues_Update")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@IssueID", SqlDbType.bigint, issueID))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Title", SqlDbType.ntext, title))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@StatusID", SqlDbType.tinyint, statusID))
      
            If (SubStatusID.HasValue = true ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@SubStatusID", SqlDbType.tinyint, subStatusID))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@SubStatusID", SqlDbType.tinyint, global.System.DBNull.Value))
      End If
        
            If (Not assignedToID  Is Nothing ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@AssignedToID", SqlDbType.nvarchar, assignedToID))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@AssignedToID", SqlDbType.nvarchar, global.System.DBNull.Value))
      End If
                    command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@IssueTypeID", SqlDbType.tinyint, issueTypeID))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Severity", SqlDbType.tinyint, severity))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Priority", SqlDbType.tinyint, priority))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ChangedByID", SqlDbType.nvarchar, changedByID))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@LastChange", SqlDbType.datetime, lastChange))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@OpenedDate", SqlDbType.datetime, openedDate))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@OpenedByID", SqlDbType.nvarchar, openedByID))
      
            If (PlatformID.HasValue = true ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PlatformID", SqlDbType.int, platformID))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PlatformID", SqlDbType.int, global.System.DBNull.Value))
      End If
        
            If (ResolutionDate.HasValue = true ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolutionDate", SqlDbType.datetime, resolutionDate))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolutionDate", SqlDbType.datetime, global.System.DBNull.Value))
      End If
        
            If (ResolutionID.HasValue = true ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolutionID", SqlDbType.tinyint, resolutionID))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolutionID", SqlDbType.tinyint, global.System.DBNull.Value))
      End If
        
            If (Not resolvedByID  Is Nothing ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolvedByID", SqlDbType.nvarchar, resolvedByID))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolvedByID", SqlDbType.nvarchar, global.System.DBNull.Value))
      End If
        
            If (Not description  Is Nothing ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Description", SqlDbType.ntext, description))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Description", SqlDbType.ntext, global.System.DBNull.Value))
      End If
        
            If (Not reproSteps  Is Nothing ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ReproSteps", SqlDbType.ntext, reproSteps))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ReproSteps", SqlDbType.ntext, global.System.DBNull.Value))
      End If
        
            If (DuplicateID.HasValue = true ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@DuplicateID", SqlDbType.bigint, duplicateID))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@DuplicateID", SqlDbType.bigint, global.System.DBNull.Value))
      End If
        
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Inserts a record into the Issues table on the database.
        ''' </summary>
      ''' <param name="issueID" />
      ''' <param name="title" />
      ''' <param name="statusID" />
      ''' <param name="subStatusID" />
      ''' <param name="assignedToID" />
      ''' <param name="issueTypeID" />
      ''' <param name="severity" />
      ''' <param name="priority" />
      ''' <param name="changedByID" />
      ''' <param name="lastChange" />
      ''' <param name="openedDate" />
      ''' <param name="openedByID" />
      ''' <param name="platformID" />
      ''' <param name="resolutionDate" />
      ''' <param name="resolutionID" />
      ''' <param name="resolvedByID" />
      ''' <param name="description" />
      ''' <param name="reproSteps" />
      ''' <param name="duplicateID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetInsertDbCommand( ByVal issueID As Int64,  ByVal title As String,  ByVal statusID As Byte,  ByVal subStatusID As  Nullable(Of Byte) ,  ByVal assignedToID As String,  ByVal issueTypeID As Byte,  ByVal severity As Byte,  ByVal priority As Byte,  ByVal changedByID As String,  ByVal lastChange As DateTime,  ByVal openedDate As DateTime,  ByVal openedByID As String,  ByVal platformID As  Nullable(Of Int32) ,  ByVal resolutionDate As  Nullable(Of DateTime) ,  ByVal resolutionID As  Nullable(Of Byte) ,  ByVal resolvedByID As String,  ByVal description As String,  ByVal reproSteps As String,  ByVal duplicateID As  Nullable(Of Int64) ) As IDbCommand Implements IDbIssuesCommandProvider.GetInsertDbCommand
            
            Dim command As New SqlCommand("Issues_Insert")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@IssueID", SqlDbType.bigint, issueID))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Title", SqlDbType.ntext, title))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@StatusID", SqlDbType.tinyint, statusID))
      
            If (SubStatusID.HasValue = true ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@SubStatusID", SqlDbType.tinyint, subStatusID))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@SubStatusID", SqlDbType.tinyint, global.System.DBNull.Value))
      End If
        
            If (Not assignedToID  Is Nothing ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@AssignedToID", SqlDbType.nvarchar, assignedToID))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@AssignedToID", SqlDbType.nvarchar, global.System.DBNull.Value))
      End If
                    command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@IssueTypeID", SqlDbType.tinyint, issueTypeID))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Severity", SqlDbType.tinyint, severity))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Priority", SqlDbType.tinyint, priority))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ChangedByID", SqlDbType.nvarchar, changedByID))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@LastChange", SqlDbType.datetime, lastChange))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@OpenedDate", SqlDbType.datetime, openedDate))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@OpenedByID", SqlDbType.nvarchar, openedByID))
      
            If (PlatformID.HasValue = true ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PlatformID", SqlDbType.int, platformID))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PlatformID", SqlDbType.int, global.System.DBNull.Value))
      End If
        
            If (ResolutionDate.HasValue = true ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolutionDate", SqlDbType.datetime, resolutionDate))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolutionDate", SqlDbType.datetime, global.System.DBNull.Value))
      End If
        
            If (ResolutionID.HasValue = true ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolutionID", SqlDbType.tinyint, resolutionID))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolutionID", SqlDbType.tinyint, global.System.DBNull.Value))
      End If
        
            If (Not resolvedByID  Is Nothing ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolvedByID", SqlDbType.nvarchar, resolvedByID))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolvedByID", SqlDbType.nvarchar, global.System.DBNull.Value))
      End If
        
            If (Not description  Is Nothing ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Description", SqlDbType.ntext, description))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Description", SqlDbType.ntext, global.System.DBNull.Value))
      End If
        
            If (Not reproSteps  Is Nothing ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ReproSteps", SqlDbType.ntext, reproSteps))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ReproSteps", SqlDbType.ntext, global.System.DBNull.Value))
      End If
        
            If (DuplicateID.HasValue = true ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@DuplicateID", SqlDbType.bigint, duplicateID))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@DuplicateID", SqlDbType.bigint, global.System.DBNull.Value))
      End If
        
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Deletes one or more records from the Issues table 
        ''' </summary>
      ''' <param name="issueID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetDeleteDbCommand( ByVal issueID As Int64) As IDbCommand Implements IDbIssuesCommandProvider.GetDeleteDbCommand
            
            Dim command As New SqlCommand("Issues_Delete")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@IssueID", SqlDbType.bigint, issueID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataPageable returns a IDataReader populated with a subset of data from Issues
        ''' </summary>
      ''' <param name="sortExpression" />
      ''' <param name="page" />
      ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataPageableDbCommand( ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataPageableDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataPageable")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar, sortExpression))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetRowCount returns the row count for Issues
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetRowCountDbCommand() As IDbCommand Implements IDbIssuesCommandProvider.GetGetRowCountDbCommand
            
            Dim command As New SqlCommand("Issues_GetRowCount")
            command.CommandType = CommandType.StoredProcedure
    
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByIssueID returns a IDataReader for Issues
        ''' </summary>
      ''' <param name="issueID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByIssueIDDbCommand( ByVal issueID As Int64) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByIssueIDDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByIssueID")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@IssueID", SqlDbType.bigint, issueID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByDuplicateID returns a IDataReader for Issues
        ''' </summary>
      ''' <param name="duplicateID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByDuplicateIDDbCommand( ByVal duplicateID As Int64) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByDuplicateIDDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByDuplicateID")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@DuplicateID", SqlDbType.bigint, duplicateID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByDuplicateIDPageable returns a IDataReader populated with a subset of data from Issues
        ''' </summary>
      ''' <param name="duplicateID" />
      ''' <param name="sortExpression" />
      ''' <param name="page" />
      ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByDuplicateIDPageableDbCommand( ByVal duplicateID As Int64,  ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByDuplicateIDPageableDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByDuplicateIDPageable")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@DuplicateID", SqlDbType.bigint, duplicateID))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar, sortExpression))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetRowCount returns the row count for Issues
        ''' </summary>
      ''' <param name="duplicateID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByDuplicateIDRowCountDbCommand( ByVal duplicateID As Int64) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByDuplicateIDRowCountDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByDuplicateIDRowCount")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@DuplicateID", SqlDbType.bigint, duplicateID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByIssueTypeID returns a IDataReader for Issues
        ''' </summary>
      ''' <param name="issueTypeID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByIssueTypeIDDbCommand( ByVal issueTypeID As Byte) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByIssueTypeIDDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByIssueTypeID")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@IssueTypeID", SqlDbType.tinyint, issueTypeID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByIssueTypeIDPageable returns a IDataReader populated with a subset of data from Issues
        ''' </summary>
      ''' <param name="issueTypeID" />
      ''' <param name="sortExpression" />
      ''' <param name="page" />
      ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByIssueTypeIDPageableDbCommand( ByVal issueTypeID As Byte,  ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByIssueTypeIDPageableDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByIssueTypeIDPageable")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@IssueTypeID", SqlDbType.tinyint, issueTypeID))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar, sortExpression))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetRowCount returns the row count for Issues
        ''' </summary>
      ''' <param name="issueTypeID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByIssueTypeIDRowCountDbCommand( ByVal issueTypeID As Byte) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByIssueTypeIDRowCountDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByIssueTypeIDRowCount")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@IssueTypeID", SqlDbType.tinyint, issueTypeID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByPlatformID returns a IDataReader for Issues
        ''' </summary>
      ''' <param name="platformID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByPlatformIDDbCommand( ByVal platformID As Int32) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByPlatformIDDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByPlatformID")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PlatformID", SqlDbType.int, platformID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByPlatformIDPageable returns a IDataReader populated with a subset of data from Issues
        ''' </summary>
      ''' <param name="platformID" />
      ''' <param name="sortExpression" />
      ''' <param name="page" />
      ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByPlatformIDPageableDbCommand( ByVal platformID As Int32,  ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByPlatformIDPageableDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByPlatformIDPageable")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PlatformID", SqlDbType.int, platformID))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar, sortExpression))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetRowCount returns the row count for Issues
        ''' </summary>
      ''' <param name="platformID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByPlatformIDRowCountDbCommand( ByVal platformID As Int32) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByPlatformIDRowCountDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByPlatformIDRowCount")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PlatformID", SqlDbType.int, platformID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByResolutionID returns a IDataReader for Issues
        ''' </summary>
      ''' <param name="resolutionID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByResolutionIDDbCommand( ByVal resolutionID As Byte) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByResolutionIDDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByResolutionID")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolutionID", SqlDbType.tinyint, resolutionID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByResolutionIDPageable returns a IDataReader populated with a subset of data from Issues
        ''' </summary>
      ''' <param name="resolutionID" />
      ''' <param name="sortExpression" />
      ''' <param name="page" />
      ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByResolutionIDPageableDbCommand( ByVal resolutionID As Byte,  ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByResolutionIDPageableDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByResolutionIDPageable")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolutionID", SqlDbType.tinyint, resolutionID))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar, sortExpression))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetRowCount returns the row count for Issues
        ''' </summary>
      ''' <param name="resolutionID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByResolutionIDRowCountDbCommand( ByVal resolutionID As Byte) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByResolutionIDRowCountDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByResolutionIDRowCount")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolutionID", SqlDbType.tinyint, resolutionID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByStatusID returns a IDataReader for Issues
        ''' </summary>
      ''' <param name="statusID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByStatusIDDbCommand( ByVal statusID As Byte) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByStatusIDDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByStatusID")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@StatusID", SqlDbType.tinyint, statusID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByStatusIDPageable returns a IDataReader populated with a subset of data from Issues
        ''' </summary>
      ''' <param name="statusID" />
      ''' <param name="sortExpression" />
      ''' <param name="page" />
      ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByStatusIDPageableDbCommand( ByVal statusID As Byte,  ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByStatusIDPageableDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByStatusIDPageable")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@StatusID", SqlDbType.tinyint, statusID))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar, sortExpression))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetRowCount returns the row count for Issues
        ''' </summary>
      ''' <param name="statusID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByStatusIDRowCountDbCommand( ByVal statusID As Byte) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByStatusIDRowCountDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByStatusIDRowCount")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@StatusID", SqlDbType.tinyint, statusID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataBySubStatusID returns a IDataReader for Issues
        ''' </summary>
      ''' <param name="subStatusID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataBySubStatusIDDbCommand( ByVal subStatusID As Byte) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataBySubStatusIDDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataBySubStatusID")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@SubStatusID", SqlDbType.tinyint, subStatusID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataBySubStatusIDPageable returns a IDataReader populated with a subset of data from Issues
        ''' </summary>
      ''' <param name="subStatusID" />
      ''' <param name="sortExpression" />
      ''' <param name="page" />
      ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataBySubStatusIDPageableDbCommand( ByVal subStatusID As Byte,  ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataBySubStatusIDPageableDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataBySubStatusIDPageable")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@SubStatusID", SqlDbType.tinyint, subStatusID))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar, sortExpression))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetRowCount returns the row count for Issues
        ''' </summary>
      ''' <param name="subStatusID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataBySubStatusIDRowCountDbCommand( ByVal subStatusID As Byte) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataBySubStatusIDRowCountDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataBySubStatusIDRowCount")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@SubStatusID", SqlDbType.tinyint, subStatusID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByAssignedToID returns a IDataReader for Issues
        ''' </summary>
      ''' <param name="assignedToID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByAssignedToIDDbCommand( ByVal assignedToID As String) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByAssignedToIDDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByAssignedToID")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@AssignedToID", SqlDbType.nvarchar, assignedToID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByAssignedToIDPageable returns a IDataReader populated with a subset of data from Issues
        ''' </summary>
      ''' <param name="assignedToID" />
      ''' <param name="sortExpression" />
      ''' <param name="page" />
      ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByAssignedToIDPageableDbCommand( ByVal assignedToID As String,  ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByAssignedToIDPageableDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByAssignedToIDPageable")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@AssignedToID", SqlDbType.nvarchar, assignedToID))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar, sortExpression))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetRowCount returns the row count for Issues
        ''' </summary>
      ''' <param name="assignedToID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByAssignedToIDRowCountDbCommand( ByVal assignedToID As String) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByAssignedToIDRowCountDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByAssignedToIDRowCount")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@AssignedToID", SqlDbType.nvarchar, assignedToID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByChangedByID returns a IDataReader for Issues
        ''' </summary>
      ''' <param name="changedByID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByChangedByIDDbCommand( ByVal changedByID As String) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByChangedByIDDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByChangedByID")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ChangedByID", SqlDbType.nvarchar, changedByID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByChangedByIDPageable returns a IDataReader populated with a subset of data from Issues
        ''' </summary>
      ''' <param name="changedByID" />
      ''' <param name="sortExpression" />
      ''' <param name="page" />
      ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByChangedByIDPageableDbCommand( ByVal changedByID As String,  ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByChangedByIDPageableDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByChangedByIDPageable")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ChangedByID", SqlDbType.nvarchar, changedByID))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar, sortExpression))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetRowCount returns the row count for Issues
        ''' </summary>
      ''' <param name="changedByID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByChangedByIDRowCountDbCommand( ByVal changedByID As String) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByChangedByIDRowCountDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByChangedByIDRowCount")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ChangedByID", SqlDbType.nvarchar, changedByID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByOpenedByID returns a IDataReader for Issues
        ''' </summary>
      ''' <param name="openedByID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByOpenedByIDDbCommand( ByVal openedByID As String) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByOpenedByIDDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByOpenedByID")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@OpenedByID", SqlDbType.nvarchar, openedByID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByOpenedByIDPageable returns a IDataReader populated with a subset of data from Issues
        ''' </summary>
      ''' <param name="openedByID" />
      ''' <param name="sortExpression" />
      ''' <param name="page" />
      ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByOpenedByIDPageableDbCommand( ByVal openedByID As String,  ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByOpenedByIDPageableDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByOpenedByIDPageable")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@OpenedByID", SqlDbType.nvarchar, openedByID))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar, sortExpression))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetRowCount returns the row count for Issues
        ''' </summary>
      ''' <param name="openedByID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByOpenedByIDRowCountDbCommand( ByVal openedByID As String) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByOpenedByIDRowCountDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByOpenedByIDRowCount")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@OpenedByID", SqlDbType.nvarchar, openedByID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByResolvedByID returns a IDataReader for Issues
        ''' </summary>
      ''' <param name="resolvedByID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByResolvedByIDDbCommand( ByVal resolvedByID As String) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByResolvedByIDDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByResolvedByID")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolvedByID", SqlDbType.nvarchar, resolvedByID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByResolvedByIDPageable returns a IDataReader populated with a subset of data from Issues
        ''' </summary>
      ''' <param name="resolvedByID" />
      ''' <param name="sortExpression" />
      ''' <param name="page" />
      ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByResolvedByIDPageableDbCommand( ByVal resolvedByID As String,  ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByResolvedByIDPageableDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByResolvedByIDPageable")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolvedByID", SqlDbType.nvarchar, resolvedByID))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar, sortExpression))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetRowCount returns the row count for Issues
        ''' </summary>
      ''' <param name="resolvedByID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByResolvedByIDRowCountDbCommand( ByVal resolvedByID As String) As IDbCommand Implements IDbIssuesCommandProvider.GetGetDataByResolvedByIDRowCountDbCommand
            
            Dim command As New SqlCommand("Issues_GetDataByResolvedByIDRowCount")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ResolvedByID", SqlDbType.nvarchar, resolvedByID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
  End Class
 End Namespace
  