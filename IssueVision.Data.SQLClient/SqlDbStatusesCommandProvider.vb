'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.Data.SqlClient
Imports IssueVision.Data.DbCommandProvider

Namespace IssueVision.Data.SqlDbCommandProvider 

  
Public Class SqlDbStatusesCommandProvider
      Implements IDbStatusesCommandProvider
    
      ReadOnly _dbConnHolder As DbConnectionHolder

      Public Sub New()
          _dbConnHolder = New DbConnectionHolder(DbConnectionName)
      End Sub

      Public ReadOnly Property DbConnectionName() As String Implements IDbStatusesCommandProvider.DbConnectionName
          Get
              Return "IssueVisionConnection"
          End Get
      End Property

      Public ReadOnly Property StatusesDbConnectionHolder() As DbConnectionHolder Implements IDbStatusesCommandProvider.StatusesDbConnectionHolder
          Get
              Return _dbConnHolder
          End Get
      End Property
      
    
        ''' <summary>
        ''' Selects one or more records from the Statuses table 
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataDbCommand() As IDbCommand Implements IDbStatusesCommandProvider.GetGetDataDbCommand
            
            Dim command As New SqlCommand("Statuses_Select")
            command.CommandType = CommandType.StoredProcedure
    
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Updates one or more records from the Statuses table 
        ''' </summary>
      ''' <param name="statusID" />
      ''' <param name="name" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetUpdateDbCommand( ByVal statusID As Byte,  ByVal name As String) As IDbCommand Implements IDbStatusesCommandProvider.GetUpdateDbCommand
            
            Dim command As New SqlCommand("Statuses_Update")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@StatusID", SqlDbType.tinyint, statusID))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Name", SqlDbType.nvarchar, name))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Inserts a record into the Statuses table on the database.
        ''' </summary>
      ''' <param name="statusID" />
      ''' <param name="name" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetInsertDbCommand( ByVal statusID As Byte,  ByVal name As String) As IDbCommand Implements IDbStatusesCommandProvider.GetInsertDbCommand
            
            Dim command As New SqlCommand("Statuses_Insert")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@StatusID", SqlDbType.tinyint, statusID))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Name", SqlDbType.nvarchar, name))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Deletes one or more records from the Statuses table 
        ''' </summary>
      ''' <param name="statusID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetDeleteDbCommand( ByVal statusID As Byte) As IDbCommand Implements IDbStatusesCommandProvider.GetDeleteDbCommand
            
            Dim command As New SqlCommand("Statuses_Delete")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@StatusID", SqlDbType.tinyint, statusID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataPageable returns a IDataReader populated with a subset of data from Statuses
        ''' </summary>
      ''' <param name="sortExpression" />
      ''' <param name="page" />
      ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataPageableDbCommand( ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32) As IDbCommand Implements IDbStatusesCommandProvider.GetGetDataPageableDbCommand
            
            Dim command As New SqlCommand("Statuses_GetDataPageable")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar, sortExpression))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetRowCount returns the row count for Statuses
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetRowCountDbCommand() As IDbCommand Implements IDbStatusesCommandProvider.GetGetRowCountDbCommand
            
            Dim command As New SqlCommand("Statuses_GetRowCount")
            command.CommandType = CommandType.StoredProcedure
    
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByStatusID returns a IDataReader for Statuses
        ''' </summary>
      ''' <param name="statusID" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByStatusIDDbCommand( ByVal statusID As Byte) As IDbCommand Implements IDbStatusesCommandProvider.GetGetDataByStatusIDDbCommand
            
            Dim command As New SqlCommand("Statuses_GetDataByStatusID")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@StatusID", SqlDbType.tinyint, statusID))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
  End Class
 End Namespace
  