'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Generated by Merlin Version: 1.0.0.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.Data.Common
Imports System.Data.SqlClient
Imports IssueVision.Data.DbCommandProvider

Namespace IssueVision.Data.SqlDbCommandProvider 

  
Public Class SqlDbUsersCommandProvider
      Implements IDbUsersCommandProvider
    
      ReadOnly _dbConnHolder As DbConnectionHolder

      Public Sub New()
          _dbConnHolder = New DbConnectionHolder(DbConnectionName)
      End Sub

      Public ReadOnly Property DbConnectionName() As String Implements IDbUsersCommandProvider.DbConnectionName
          Get
              Return "IssueVisionConnection"
          End Get
      End Property

      Public ReadOnly Property UsersDbConnectionHolder() As DbConnectionHolder Implements IDbUsersCommandProvider.UsersDbConnectionHolder
          Get
              Return _dbConnHolder
          End Get
      End Property
      
    
        ''' <summary>
        ''' Selects one or more records from the Users table 
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataDbCommand() As IDbCommand Implements IDbUsersCommandProvider.GetGetDataDbCommand
            
            Dim command As New SqlCommand("Users_Select")
            command.CommandType = CommandType.StoredProcedure
    
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Updates one or more records from the Users table 
        ''' </summary>
      ''' <param name="name" />
      ''' <param name="firstName" />
      ''' <param name="lastName" />
      ''' <param name="email" />
      ''' <param name="passwordHash" />
      ''' <param name="passwordSalt" />
      ''' <param name="passwordQuestion" />
      ''' <param name="passwordAnswerHash" />
      ''' <param name="passwordAnswerSalt" />
      ''' <param name="userType" />
      ''' <param name="profileReset" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetUpdateDbCommand( ByVal name As String,  ByVal firstName As String,  ByVal lastName As String,  ByVal email As String,  ByVal passwordHash As String,  ByVal passwordSalt As String,  ByVal passwordQuestion As String,  ByVal passwordAnswerHash As String,  ByVal passwordAnswerSalt As String,  ByVal userType As String,  ByVal profileReset As Byte) As IDbCommand Implements IDbUsersCommandProvider.GetUpdateDbCommand
            
            Dim command As New SqlCommand("Users_Update")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Name", SqlDbType.nvarchar, name))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@FirstName", SqlDbType.nvarchar, firstName))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@LastName", SqlDbType.nvarchar, lastName))
      
            If (Not email  Is Nothing ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Email", SqlDbType.nvarchar, email))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Email", SqlDbType.nvarchar, global.System.DBNull.Value))
      End If
                    command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PasswordHash", SqlDbType.nvarchar, passwordHash))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PasswordSalt", SqlDbType.nvarchar, passwordSalt))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PasswordQuestion", SqlDbType.nvarchar, passwordQuestion))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PasswordAnswerHash", SqlDbType.nvarchar, passwordAnswerHash))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PasswordAnswerSalt", SqlDbType.nvarchar, passwordAnswerSalt))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@UserType", SqlDbType.char, userType))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ProfileReset", SqlDbType.tinyint, profileReset))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Inserts a record into the Users table on the database.
        ''' </summary>
      ''' <param name="name" />
      ''' <param name="firstName" />
      ''' <param name="lastName" />
      ''' <param name="email" />
      ''' <param name="passwordHash" />
      ''' <param name="passwordSalt" />
      ''' <param name="passwordQuestion" />
      ''' <param name="passwordAnswerHash" />
      ''' <param name="passwordAnswerSalt" />
      ''' <param name="userType" />
      ''' <param name="profileReset" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetInsertDbCommand( ByVal name As String,  ByVal firstName As String,  ByVal lastName As String,  ByVal email As String,  ByVal passwordHash As String,  ByVal passwordSalt As String,  ByVal passwordQuestion As String,  ByVal passwordAnswerHash As String,  ByVal passwordAnswerSalt As String,  ByVal userType As String,  ByVal profileReset As Byte) As IDbCommand Implements IDbUsersCommandProvider.GetInsertDbCommand
            
            Dim command As New SqlCommand("Users_Insert")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Name", SqlDbType.nvarchar, name))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@FirstName", SqlDbType.nvarchar, firstName))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@LastName", SqlDbType.nvarchar, lastName))
      
            If (Not email  Is Nothing ) Then
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Email", SqlDbType.nvarchar, email))
      Else
                            command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Email", SqlDbType.nvarchar, global.System.DBNull.Value))
      End If
                    command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PasswordHash", SqlDbType.nvarchar, passwordHash))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PasswordSalt", SqlDbType.nvarchar, passwordSalt))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PasswordQuestion", SqlDbType.nvarchar, passwordQuestion))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PasswordAnswerHash", SqlDbType.nvarchar, passwordAnswerHash))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PasswordAnswerSalt", SqlDbType.nvarchar, passwordAnswerSalt))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@UserType", SqlDbType.char, userType))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@ProfileReset", SqlDbType.tinyint, profileReset))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Deletes one or more records from the Users table 
        ''' </summary>
      ''' <param name="name" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetDeleteDbCommand( ByVal name As String) As IDbCommand Implements IDbUsersCommandProvider.GetDeleteDbCommand
            
            Dim command As New SqlCommand("Users_Delete")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Name", SqlDbType.nvarchar, name))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataPageable returns a IDataReader populated with a subset of data from Users
        ''' </summary>
      ''' <param name="sortExpression" />
      ''' <param name="page" />
      ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataPageableDbCommand( ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32) As IDbCommand Implements IDbUsersCommandProvider.GetGetDataPageableDbCommand
            
            Dim command As New SqlCommand("Users_GetDataPageable")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar, sortExpression))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetRowCount returns the row count for Users
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetRowCountDbCommand() As IDbCommand Implements IDbUsersCommandProvider.GetGetRowCountDbCommand
            
            Dim command As New SqlCommand("Users_GetRowCount")
            command.CommandType = CommandType.StoredProcedure
    
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByName returns a IDataReader for Users
        ''' </summary>
      ''' <param name="name" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByNameDbCommand( ByVal name As String) As IDbCommand Implements IDbUsersCommandProvider.GetGetDataByNameDbCommand
            
            Dim command As New SqlCommand("Users_GetDataByName")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@Name", SqlDbType.nvarchar, name))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByPasswordQuestion returns a IDataReader for Users
        ''' </summary>
      ''' <param name="passwordQuestion" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByPasswordQuestionDbCommand( ByVal passwordQuestion As String) As IDbCommand Implements IDbUsersCommandProvider.GetGetDataByPasswordQuestionDbCommand
            
            Dim command As New SqlCommand("Users_GetDataByPasswordQuestion")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PasswordQuestion", SqlDbType.nvarchar, passwordQuestion))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetDataByPasswordQuestionPageable returns a IDataReader populated with a subset of data from Users
        ''' </summary>
      ''' <param name="passwordQuestion" />
      ''' <param name="sortExpression" />
      ''' <param name="page" />
      ''' <param name="pageSize" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByPasswordQuestionPageableDbCommand( ByVal passwordQuestion As String,  ByVal sortExpression As String,  ByVal page As Int32,  ByVal pageSize As Int32) As IDbCommand Implements IDbUsersCommandProvider.GetGetDataByPasswordQuestionPageableDbCommand
            
            Dim command As New SqlCommand("Users_GetDataByPasswordQuestionPageable")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PasswordQuestion", SqlDbType.nvarchar, passwordQuestion))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@sortExpression", SqlDbType.varchar, sortExpression))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@page", SqlDbType.Int, page))
                  command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@pageSize", SqlDbType.Int, pageSize))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
        ''' <summary>
        ''' Function GetRowCount returns the row count for Users
        ''' </summary>
      ''' <param name="passwordQuestion" />
        ''' <returns></returns>
        ''' <remarks></remarks> 
        Public Function GetGetDataByPasswordQuestionRowCountDbCommand( ByVal passwordQuestion As String) As IDbCommand Implements IDbUsersCommandProvider.GetGetDataByPasswordQuestionRowCountDbCommand
            
            Dim command As New SqlCommand("Users_GetDataByPasswordQuestionRowCount")
            command.CommandType = CommandType.StoredProcedure
                command.Parameters.Add(SqlParameterFactory.CreateInputParameter("@PasswordQuestion", SqlDbType.nvarchar, passwordQuestion))
      
            command.Connection = CType(_dbConnHolder.Connection, SqlConnection)
            Return command
      End Function
         
            
  End Class
 End Namespace
  